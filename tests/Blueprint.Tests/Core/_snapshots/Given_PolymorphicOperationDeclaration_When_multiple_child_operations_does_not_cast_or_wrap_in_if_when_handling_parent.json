{
  "AutoGenerated": "// <auto-generated />\r\n// OperationChild2ExecutorPipeline\r\n\r\nusing Blueprint;\r\nusing Blueprint.Errors;\r\nusing Microsoft.Extensions.Logging;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Blueprint.Tests.Core\r\n{\r\n    public class OperationChild2ExecutorPipeline : Blueprint.IOperationExecutorPipeline\r\n    {\r\n        private readonly Microsoft.Extensions.Logging.ILogger _logger;\r\n        private readonly Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase> _operationBaseIApiOperationHandler;\r\n        private readonly Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2> _operationChild2IApiOperationHandler;\r\n        private readonly Blueprint.Errors.IErrorLogger _errorLogger;\r\n\r\n        public OperationChild2ExecutorPipeline(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase> operationBaseIApiOperationHandler, Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2> operationChild2IApiOperationHandler, Blueprint.Errors.IErrorLogger errorLogger)\r\n        {\r\n            _logger = loggerFactory.CreateLogger(\"OperationChild2ExecutorPipeline\");\r\n            _operationBaseIApiOperationHandler = operationBaseIApiOperationHandler;\r\n            _operationChild2IApiOperationHandler = operationChild2IApiOperationHandler;\r\n            _errorLogger = errorLogger;\r\n        }\r\n\r\n\r\n        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteAsync(Blueprint.ApiOperationContext context)\r\n        {\r\n            var operationChild2 = (Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2) context.Operation;\r\n            try\r\n            {\r\n\r\n                // OperationExecutorMiddlewareBuilder\r\n                using var apmSpanOfHandler = context.ApmSpan.StartSpan(\"internal\", \"Handler\", \"exec\");\r\n                if (operationChild2 is Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase)\r\n                {\r\n                    _logger.Log(Microsoft.Extensions.Logging.LogLevel.Information, \"Executing API operation with handler {HandlerType}\", _operationBaseIApiOperationHandler.GetType().Name);\r\n        await _operationBaseIApiOperationHandler.Handle(((Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase)operationChild2), context);\r\n                }\r\n\r\n                _logger.Log(Microsoft.Extensions.Logging.LogLevel.Information, \"Executing API operation with handler {HandlerType}\", _operationChild2IApiOperationHandler.GetType().Name);\r\n        await _operationChild2IApiOperationHandler.Handle(operationChild2, context);\r\n                apmSpanOfHandler.Dispose();\r\n\r\n                // ReturnFrameMiddlewareBuilder\r\n                return Blueprint.NoResultOperationResult.Instance;\r\n            }\r\n\r\n            catch (System.Exception e)\r\n            {\r\n                var userAuthorisationContext = context.UserAuthorisationContext;\r\n                var identifier = new Blueprint.Authorisation.UserExceptionIdentifier(userAuthorisationContext);\r\n\r\n                userAuthorisationContext?.PopulateMetadata((k, v) => e.Data[k] = v?.ToString());\r\n\r\n        var result_of_LogAsync = await _errorLogger.LogAsync(e, null, identifier);\r\n\r\n                context.ApmSpan?.RecordException(e);\r\n                return new Blueprint.UnhandledExceptionOperationResult(e);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteNestedAsync(Blueprint.ApiOperationContext context)\r\n        {\r\n            var operationChild2 = (Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2) context.Operation;\r\n            try\r\n            {\r\n\r\n                // OperationExecutorMiddlewareBuilder\r\n                using var apmSpanOfHandler = context.ApmSpan.StartSpan(\"internal\", \"Handler\", \"exec\");\r\n                if (operationChild2 is Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase)\r\n                {\r\n                    _logger.Log(Microsoft.Extensions.Logging.LogLevel.Information, \"Executing API operation with handler {HandlerType}\", _operationBaseIApiOperationHandler.GetType().Name);\r\n        await _operationBaseIApiOperationHandler.Handle(((Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase)operationChild2), context);\r\n                }\r\n\r\n                _logger.Log(Microsoft.Extensions.Logging.LogLevel.Information, \"Executing API operation with handler {HandlerType}\", _operationChild2IApiOperationHandler.GetType().Name);\r\n        await _operationChild2IApiOperationHandler.Handle(operationChild2, context);\r\n                apmSpanOfHandler.Dispose();\r\n\r\n                // ReturnFrameMiddlewareBuilder\r\n                return Blueprint.NoResultOperationResult.Instance;\r\n            }\r\n\r\n            catch (System.Exception e)\r\n            {\r\n                var userAuthorisationContext = context.UserAuthorisationContext;\r\n                var identifier = new Blueprint.Authorisation.UserExceptionIdentifier(userAuthorisationContext);\r\n\r\n                userAuthorisationContext?.PopulateMetadata((k, v) => e.Data[k] = v?.ToString());\r\n\r\n        var result_of_LogAsync = await _errorLogger.LogAsync(e, null, identifier);\r\n\r\n                context.ApmSpan?.RecordException(e);\r\n                return new Blueprint.UnhandledExceptionOperationResult(e);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n"
}