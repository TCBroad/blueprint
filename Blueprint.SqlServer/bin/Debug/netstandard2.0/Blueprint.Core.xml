<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blueprint.Core</name>
    </assembly>
    <members>
        <member name="T:Blueprint.Core.Apm.IApmDependencyOperation">
            <summary>
            Represents a dependency that is being tracked for APM purposes. An instance can be created
            by using <see cref="M:Blueprint.Core.Apm.IApmTool.TrackDependencyAsync(System.String,System.String,System.String,System.String,System.Func{Blueprint.Core.Apm.IApmDependencyOperation,System.Threading.Tasks.Task})" />, and will, when disposed, log the dependency
            using the configured APM implementation.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Apm.IApmDependencyOperation.MarkSuccess(System.String)">
            <summary>
            Marks this dependency as successful, optionally setting the result code (which is typically a HTTP
            code, even for non-http) of the result.
            </summary>
            <param name="resultCode">The (optional) result code to set.</param>
        </member>
        <member name="M:Blueprint.Core.Apm.IApmDependencyOperation.MarkFailure(System.String,System.Exception)">
            <summary>
            Marks this dependency as a failure with the given (usually HTTP-like) result code.
            </summary>
            <param name="resultCode">The result code of this dependency failure.</param>
            <param name="exception">The (optional) exception that represents the dependency failure.</param>
        </member>
        <member name="T:Blueprint.Core.Apm.IApmTool">
            <summary>
            An abstraction over an APM tool.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Apm.IApmTool.InvokeAsync(System.String,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the given operation, tracking it in the APM tool using the specified operation name.
            </summary>
            <param name="operationName">The name of the operation being performed.</param>
            <param name="executor">The method to execute.</param>
            <returns>The task from the child Func.</returns>
        </member>
        <member name="M:Blueprint.Core.Apm.IApmTool.TrackDependencyAsync(System.String,System.String,System.String,System.String,System.Func{Blueprint.Core.Apm.IApmDependencyOperation,System.Threading.Tasks.Task})">
            <summary>
            Starts tracking a dependency, using the provided data to identify the dependency, returning a
            <see cref="T:System.IDisposable" /> that will, when disposed, actually store the tracking information.
            </summary>
            <param name="operationName">The name of the dependency being tracked.</param>
            <param name="target">The target of the dependency, for example a host name of a server.</param>
            <param name="type">The type of dependency, for example SQL or HTTP.</param>
            <param name="extraData">Any extra data that should be stored, for example a SQL statement or POST body.</param>
            <param name="executor">A method that represents the dependency.</param>
            <returns>The task from the child Func.</returns>
        </member>
        <member name="T:Blueprint.Core.Apm.NullApmTool">
            <summary>
            A null <see cref="T:Blueprint.Core.Apm.IApmTool" /> that performs no actual tracking.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Apm.NullApmTool.InvokeAsync(System.String,System.Func{System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:Blueprint.Core.Apm.NullApmTool.TrackDependencyAsync(System.String,System.String,System.String,System.String,System.Func{Blueprint.Core.Apm.IApmDependencyOperation,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="T:Blueprint.Core.Auditing.AuditItem">
            <summary>
            Defines the information used to audit actions.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Auditing.AuditItem.#ctor(System.String,System.Boolean,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Auditing.AuditItem"/> class.
            </summary>
            <param name="correlationId">The context of the request.</param>
            <param name="wasSuccessful">True if the action was successful.</param>
            <param name="resultMessage">The message returned.</param>
            <param name="username">The username of the user who actioned the event.</param>
            <param name="details">The object that was passed as the action.</param>
        </member>
        <member name="P:Blueprint.Core.Auditing.AuditItem.Details">
            <summary>
            Gets the object that was passed as the action, denormalised.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Auditing.AuditItem.CorrelationId">
            <summary>
            Gets the context of the request.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Auditing.AuditItem.ResultMessage">
            <summary>
            Gets the result of the action.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Auditing.AuditItem.Username">
            <summary>
            Gets the username of the actioning user.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Auditing.AuditItem.WasSuccessful">
            <summary>
            Gets a value indicating whether the action was successful.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Auditing.DoNotAuditAttribute">
            <summary>
            An attribute that can applied to a property of a message (i.e. <see cref="!:IApiOperation" />) to 
            indicate that it should not be stored.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Auditing.IAuditor">
            <summary>
            An auditor presents the 'port' that allows storing <see cref="T:Blueprint.Core.Auditing.AuditItem"/>s in a
            persistent store such as a database.
            </summary>
            <remarks>
            The role of an <see cref="T:Blueprint.Core.Auditing.IAuditor"/> is to simply serialize an audit item and persist
            it in a fashion that allows the audit trail to be queried to determine the action
            performed within a system.
            </remarks>
        </member>
        <member name="M:Blueprint.Core.Auditing.IAuditor.Write(Blueprint.Core.Auditing.AuditItem)">
            <summary>
            Writes an <see cref="T:Blueprint.Core.Auditing.AuditItem"/> to the persistent data store.
            </summary>
            <param name="auditItem">The audit item to persist.</param>
        </member>
        <member name="T:Blueprint.Core.Auditing.SensitiveAttribute">
            <summary>
            An attribute that can applied to a property of a message (i.e. <see cref="!:IApiOperation" />) to indicate 
            that it should not be stored as it represents sensitive information (e.g. a password).
            </summary>
        </member>
        <member name="T:Blueprint.Core.Auditing.SensitiveProperties">
            <summary>
            Helper to deal with sensitive properties defined for an operation, allowing them to be excluded from
            logs etc.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Auditing.SensitiveProperties.IsSensitive(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the given member should be considered sensitive and therefore not be
            logged outside of the application to error logs, audit trails etc.
            </summary>
            <remarks>
            A property can be marked explicitly as sensitive by adding the <see cref="T:Blueprint.Core.Auditing.SensitiveAttribute" /> or
            <see cref="T:Blueprint.Core.Auditing.DoNotAuditAttribute"/> attributes. Any property that has the text "password" in it's name
            will also be considered sensitive (case-insensitive check).
            </remarks>
            <param name="p">The property to check.</param>
            <returns>Whether or not the property represents sensitive data.</returns>
        </member>
        <member name="T:Blueprint.Core.Authorisation.AllowAnonymousAttribute">
            <summary>
            An attribute that decorates a resource to indicate that no authorisation checks are
            required as anonymous users can access it.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Authorisation.ClaimInspector.#ctor(System.Collections.Generic.IEnumerable{Blueprint.Core.Authorisation.IResourceKeyExpander},Blueprint.Core.Caching.ICache)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Authorisation.ClaimInspector"/> class.
            </summary>
            <param name="resourceKeyExpanders">Resource key expanders that will be asked to 'expand' any demanded claims.</param>
            <param name="cache">Cache used to store expanded resource keys (as they will typically require database access).</param>
        </member>
        <member name="M:Blueprint.Core.Authorisation.ClaimInspector.IsDemandedClaimFulfilled(Blueprint.Core.Authorisation.IClaimsHolder,System.Security.Claims.Claim,Blueprint.Core.Authorisation.ClaimExpansionState)">
            <summary>
            Checks to see whether any claims the given <see cref="T:System.Security.Claims.ClaimsPrincipal" /> has would satisfy the
            given demanded claim.
            </summary>
            <param name="userClaims">The claims the user wishes to access a resource has.</param>
            <param name="demandedClaim">The claim that has been demanded and should be checked for.</param>
            <param name="claimExpansionState">The state of expansion, which can be used to indicate expansion has
            already happened and should not happen again.</param>
        </member>
        <member name="T:Blueprint.Core.Authorisation.ClaimRequiredAttribute">
            <summary>
            Used in conjunction with a <see cref="!:AttributeBasedResourceClaimProvider"/> indicates that a resource
            represented by the class this attribute is attached demands that a user has the Claim this attribute
            represents to be granted access.
            </summary>
            <para>
            The resource key that is specified can be a 'template', in that at runtime any property token will be
            replaced with the value of that property on the resource that is being authorised against. A token takes
            the form <c>{<em>PropertyName</em>}</c>, where <em>PropertyName</em> is the exact property name in the
            class definition.
            </para>
        </member>
        <member name="M:Blueprint.Core.Authorisation.ClaimRequiredAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Authorisation.ClaimRequiredAttribute"/> class that will be
            part of the default group of claims demanded.
            </summary>
            <param name="claimType">The claim type.</param>
            <param name="valueTemplate">The resource key template.</param>
            <param name="valueType">The right.</param>
        </member>
        <member name="P:Blueprint.Core.Authorisation.ClaimRequiredAttribute.ClaimType">
            <summary>
            Gets the claim type this attribute represents.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Authorisation.ClaimRequiredAttribute.ValueTemplate">
            <summary>
            Gets the value key template this attribute represents, which should either be the
            resource key (or 'template'), or the wildcard '*' to indicate just having a claim
            with specified <see cref="P:Blueprint.Core.Authorisation.ClaimRequiredAttribute.ClaimType"/> and <see cref="P:Blueprint.Core.Authorisation.ClaimRequiredAttribute.ValueType" /> is enough.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Authorisation.ClaimRequiredAttribute.ValueType">
            <summary>
            Gets the value type this attribute represents, which would for example be the
            actual role / permission request (i.e. ViewReport).
            </summary>
        </member>
        <member name="M:Blueprint.Core.Authorisation.ClaimRequiredAttribute.GetClaim(System.Object)">
            <summary>
            Gets the claims that decorate the type of the given object.
            </summary>
            <param name="resource">The resource on which this attribute resides.</param>
            <returns>The claims that this attribute demands.</returns>
        </member>
        <member name="T:Blueprint.Core.Authorisation.ClaimTypes">
            <summary>
            Available claim types used within Blueprint.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Authorisation.ClaimTypes.Permission">
            <summary>
            A claim type that indicates a user has a permission (e.g. 'View Patient Records'), typically 
            against some resource but may be against the 'system'.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Authorisation.ClaimTypes.Role">
            <summary>
            A claim type that indicates a user has a role (e.g. 'Manager'), typically against some
            resource but may be against the 'system'.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Authorisation.IClaimInspector.IsDemandedClaimFulfilled(Blueprint.Core.Authorisation.IClaimsHolder,System.Security.Claims.Claim,Blueprint.Core.Authorisation.ClaimExpansionState)">
            <summary>
            Checks to see whether any claims the given <see cref="T:System.Security.Claims.ClaimsPrincipal" /> has would satisfy the
            given demanded claim.
            </summary>
            <param name="userClaims">The claims the user wishes to access a resource has.</param>
            <param name="demandedClaim">The claim that has been demanded and should be checked for.</param>
            <param name="claimExpansionState">The state of expansion, which can be used to indicate expansion has
            already happened and should not happen again.</param>
        </member>
        <member name="T:Blueprint.Core.Authorisation.IResourceKeyExpander">
            <summary>
            A resource key expander is used to take a resource key from a claim, and 'expand' it such that somebody
            who has a claim on a resource that is the parent of an item also intrinsically has that same claim on all children.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Authorisation.IResourceKeyExpander.Expand(System.String)">
            <summary>
            Given a resource key will 'expand' it, turning it into a hierarchical version of the resource
            key (for example turning `User/1` into `Account/6/Team/5/User/1`), which will allow claims checking to
            have a claim for a resource key higher in the hierarchy apply to those lower (e.g. a permission claim
            for `Account/6` would grant that same permission claim to `User/1` in the previous example).
            </summary>
            <param name="resourceKey">The resource key to 'expand'.</param>
            <returns>The expanded key, or <c>null</c> if this expander does not handle the specified key.</returns>
        </member>
        <member name="T:Blueprint.Core.Authorisation.MustBeAuthenticatedAttribute">
            <summary>
            An attribute that should decorate a resource to indicate anyone who has been successfully
            authenticated by the system can access it.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Authorisation.PermissionAttribute">
            <summary>
            When applied to a message indicates that the user executing the command must have
            a given permission, a permission that is 'system-wide' and as such is not associated
            with any particular resource.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Authorisation.PermissionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Authorisation.PermissionAttribute"/> class. 
            Initializes a new instance of the PermissionForAttribute.
            </summary>
            <param name="permission">The named permission that is required.</param>
        </member>
        <member name="P:Blueprint.Core.Authorisation.PermissionAttribute.Permission">
            <summary>
            Gets the permission this attribute is representing as being required.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Authorisation.PermissionForAttribute">
            <summary>
            When applied to a message indicates that the user executing the command must have
            a permission applied at the given resource key (or above if a hierarchy exists for
            the given resource).
            </summary>
        </member>
        <member name="M:Blueprint.Core.Authorisation.PermissionForAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Authorisation.PermissionForAttribute"/> class. 
            Initializes a new instance of the PermissionForAttribute.
            </summary>
            <param name="permission">The named permission that is required.</param>
            <param name="resourceKeyTemplate">The resource key, which may contain templated variables (e.g. Site/{SiteId}).</param>
        </member>
        <member name="P:Blueprint.Core.Authorisation.PermissionForAttribute.Permission">
            <summary>
            Gets the permission this attribute is representing as being required.
            </summary>
        </member>
        <member name="T:Blueprint.Core.BlueprintCoreNamespace">
            <summary>
            Marker class used to identify this namespace in a static manner, useful when
            scanning assemblies (e.g. StructureMap configuration).
            </summary>
        </member>
        <member name="T:Blueprint.Core.Caching.Cache">
            <summary>
            Provides an entry point into the Blueprint caching subsystem.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Caching.Cache.NoCache">
            <summary>
            An implementation of <see cref="T:Blueprint.Core.Caching.ICache"/> that does nothing, to be used in
            test scenarios.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Caching.Cache.#ctor(StructureMap.IContainer)">
            <summary>
            Initializes a new instance of the Cache class.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.Cache.Provider">
            <summary>
            Gets the provider of this cache, which may be null should a provider type not be specified.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Caching.Cache.Add``1(System.String,System.Object,``0)">
            <summary>
            Adds a value to this cache using the specified unique key.
            </summary>
            <param name="category">
            A category the value belongs to, used to specify 'profiles' of caching via.
            configuration such as 'Content', or 'Reports'.
            </param>
            <param name="key">
            The unique key of this cache item.
            </param>
            <param name="value">
            The value to be stored for the given key.
            </param>
            <typeparam name="T">
            The type of the value being inserted, inferred by the compiler.
            </typeparam>
        </member>
        <member name="M:Blueprint.Core.Caching.Cache.ContainsKey``1(System.Object)">
            <summary>
            Returns a value that indicates whether ot not the cache containers the given key.
            </summary>
            <param name="key">
            The key to check for existence.
            </param>
            <returns>
            Whether or not this cache contains the specified key.
            </returns>
            <typeparam name="T">
            The type of the value being inserted, inferred by the compiler.
            </typeparam>
        </member>
        <member name="M:Blueprint.Core.Caching.Cache.GetValue``1(System.Object)">
            <summary>
            Gets the value that has been stored for the given key, or <c>null</c> if nothing
            has bene stored in this cache for the given key.
            </summary>
            <typeparam name="T">
            The type of the value that has been stored for the given key.
            </typeparam>
            <param name="key">
            The unique key that represents the cache item to retrieve.
            </param>
            <returns>
            The value that has bene stored in this cache for the given key, or <c>null</c>.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.Cache.Remove``1(System.Object)">
            <summary>
            Removes the cache item with the specified key, performing no action
            if the key does not exist.
            </summary>
            <param name="key">
            The key of the cache item that should be removed.
            </param>
            <typeparam name="T">
            The type of the value being inserted, inferred by the compiler.
            </typeparam>
        </member>
        <member name="M:Blueprint.Core.Caching.Cache.GenerateStorageKey``1(System.Object)">
            <summary>
            When a value is stored within the cache the key will be generated from the type of object being
            stored plus the key being passed into the various functions, to help avoid collisions. This method
            will generate that unique key.
            </summary>
            <typeparam name="T">
            The type of the value being stored, checked or removed.
            </typeparam>
            <param name="key">
            The client key.
            </param>
            <returns>
            A string key to be used as the unique key in the backing cache.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Caching.CacheItemPriority">
            <summary>
            Specifies the relative priority of items stored in an <see cref="T:Blueprint.Core.Caching.ICache"/>.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Caching.CacheItemPriority.Low">
            <summary>
            Cache items with this priority level are the most likely to be deleted from the cache as the server frees system memory.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Caching.CacheItemPriority.Medium">
            <summary>
            Cache items with this priority level are likely to be deleted from the cache as the server frees system memory only
            after those items with <see cref="F:Blueprint.Core.Caching.CacheItemPriority.Low"/> priority. This is the default.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Caching.CacheItemPriority.High">
            <summary>
            Cache items with this priority level are the least likely to be deleted from the cache as the server frees system memory.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Caching.CacheOptions">
            <summary>
            The options used when inserting a value into the cache.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Caching.CacheOptions.NotCached">
            <summary>
            CacheOption which is used to indicate a value should not be stored in a cache.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.CacheOptions.AbsoluteExpiration">
            <summary>
            Gets the absolute expiration time for a cache item, the latest time in which
            the item can still be retrieved from the cache before it is automatically discarded.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.CacheOptions.Priority">
            <summary>
            Gets the priority at which a item should be entered into a cache, providing
            a hint to the cache as to what items can be discarded first if required.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.CacheOptions.SlidingExpiration">
            <summary>
            Gets the sliding expiration for a cache item, a period of time which is used
            to remove an item after its last access.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Caching.CacheOptions.Absolute(Blueprint.Core.Caching.CacheItemPriority,System.TimeSpan)">
            <summary>
            Initializes a new instance of the CacheOptions class which has an absolute expiration
            date.
            </summary>
            <param name="priority">
            The priority of this cached item.
            </param>
            <param name="absoluteExpiration">
            The time, which must be in the future, at which this item
            will be evicted.
            </param>
            <returns>
            A <see cref="T:Blueprint.Core.Caching.CacheOptions"/> instance representing the absolute expiration.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.CacheOptions.Sliding(Blueprint.Core.Caching.CacheItemPriority,System.TimeSpan)">
            <summary>
            Initializes a new instance of the CacheOptions class which has a sliding expiration.
            </summary>
            <param name="priority">
            The priority of this cached item.
            </param>
            <param name="slidingExpiration">
            The amount of time after the last access to this item after which this
            item becomes invalid.
            </param>
            <returns>
            A <see cref="T:Blueprint.Core.Caching.CacheOptions"/> instance representing the sliding expiration.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.CacheOptions.ToString">
            <summary>
            Returns a string representation of this <see cref="T:Blueprint.Core.Caching.CacheOptions"/> instance, indicating whether
            it is sliding or absolute and indicating timespan and priority options that have been set.
            </summary>
            <returns>The string representation of this CacheOptions instance.</returns>
        </member>
        <member name="T:Blueprint.Core.Caching.Configuration.CachingConfiguration">
             <summary>
             Represents the configuration section that is used to configure caching.
             </summary>
             <remarks>
             Configuration of caching is done through a series of rules that allow different types
             of cached objects to be cached for differing periods of time, or not at all. The rules
             are defined as a list of sliding / fixed rules that define the options that will
             be used to construct the <see cref="T:Blueprint.Core.Caching.CacheOptions"/> when caching an object.
             </remarks>
             <example>
             The below example shows the pertinent parts required to integrate the caching
             configuration into an application configuration file.
             <code lang="xml">
                <configuration>
                  <configSections>
                    <section name="caching" type="Blueprint.Core.Caching.Configuration.CachingConfiguration, Blueprint.Core"/>
                  </configSections>
                  <caching enabled="true" provider="Blueprint.Core.Caching.WebCache, Blueprint.Core">
                    <rules>
                        <sliding type="*" timeSpan="20:00:00" itemPriority="Low" rulePriority="-1000"/>
            
                        <sliding type="QueryResult1" timeSpan="5:00:00"/>
                        <fixed category="Content" timeSpan="45:00:00"/>
                    </rules>
                  </caching>
                </configuration>
             </code>
             </example>
        </member>
        <member name="P:Blueprint.Core.Caching.Configuration.CachingConfiguration.Current">
            <summary>
            Gets or sets the current configuration of the caching components, as retrieved from the
            current <see cref="T:Blueprint.Core.Caching.Configuration.CachingConfiguration"/>.
            </summary>
            <remarks>
            If this value is set to a non-null value that will be used instead of the configuration loaded
            from the app or web config files, to be used mainly for testing purposes.
            </remarks>
        </member>
        <member name="P:Blueprint.Core.Caching.Configuration.CachingConfiguration.IsEnabled">
            <summary>
            Gets a value indicating whether caching should be enabled.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.Configuration.CachingConfiguration.ProviderType">
            <summary>
            Gets the type of the provider that should be used for caching.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.Configuration.CachingConfiguration.Strategies">
            <summary>
            Gets the strategies that have been defined, used to decide how (and if) an item will be cached;
            </summary>
        </member>
        <member name="T:Blueprint.Core.Caching.Configuration.CachingStrategy">
            <summary>
            A caching options element which defines the options for a type (or collection
            of using regular expressions).
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.Configuration.CachingStrategy.Category">
            <summary>
            Gets the category to which this caching element will be applied.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.Configuration.CachingStrategy.ItemPriority">
            <summary>
            Gets the priority at which a item should be entered into a cache, providing
            a hint to the cache as to what items can be discarded first if required.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.Configuration.CachingStrategy.Priority">
            <summary>
            Gets the priority of this rule, which is used to distinguish between rules that
            match the same type.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.Configuration.CachingStrategy.TypeName">
            <summary>
            Gets the type name that this caching options element will apply to, which
            may include wildcards for mapping.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Caching.Configuration.CachingStrategy.AppliesTo(System.String,System.Object)">
            <summary>
            Gets a value which indicates whether or not this strategy could handle the
            specified key / value pair, which is determined by whether or not the
            type of the given value is assigned to the type specified in the <see cref="P:Blueprint.Core.Caching.Configuration.CachingStrategy.TypeName"/>
            property.
            </summary>
            <param name="category">
            The category into which the value is being stored.
            </param>
            <param name="value">
            The value being inserted.
            </param>
            <returns>
            Whether or not this strategy will apply to the given pair.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.Configuration.CachingStrategy.GetOptions">
            <summary>
            Gets the options used to store the given key and value pair, returning
            CacheOptions.NotCached to indicate the value should not be cached.
            </summary>
            <returns>
            The options used to store the given key-value pair.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Caching.Configuration.FixedCachingStrategy">
            <summary>
            A fixed time cache options element, providing ethe ability to specify an absolute
            expiration time which is a timespan from when the cache element is <strong>First added</strong>
            to the cache.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.Configuration.FixedCachingStrategy.TimeSpan">
            <summary>
            Gets the time span that determines the length of time that an item will be stored
            in a cache from the moment it is first inserted.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Caching.Configuration.FixedCachingStrategy.GetOptions">
            <summary>
            Gets the options for the specified value, which will be an absolute cache
            options instance.
            </summary>
            <returns>
            The cache options to use when storing the specified value.
            </returns>
            <seealso cref="M:Blueprint.Core.Caching.CacheOptions.Absolute(Blueprint.Core.Caching.CacheItemPriority,System.TimeSpan)"/>
        </member>
        <member name="T:Blueprint.Core.Caching.Configuration.SlidingCachingStrategy">
            <summary>
            A caching element that represents a sliding expiration, such that an item will expire a certain time
            after its <strong>Last</strong> access.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Caching.Configuration.SlidingCachingStrategy.TimeSpan">
            <summary>
            Gets the time span that determines for how long an item stays in the cache after its
            last access.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Caching.Configuration.SlidingCachingStrategy.GetOptions">
            <summary>
            Gets the options for the specified value, which will be a sliding cache
            options instance.
            </summary>
            <returns>
            The cache options to use when storing the specified value.
            </returns>
            <seealso cref="M:Blueprint.Core.Caching.CacheOptions.Sliding(Blueprint.Core.Caching.CacheItemPriority,System.TimeSpan)"/>
        </member>
        <member name="T:Blueprint.Core.Caching.ICache">
            <summary>
            A cache, a data store which is designed to store expensive objects once they have been created,
            for example from a database or web service call.
            </summary>
            <remarks>
            The cache is not a simple proxy over an existing caching implementation (e.g. the HttpRuntime cache
            or the Enterprise Library). Ideally clients would not need any knowledge of how values are stored,
            or the options which determine their behaviour. The configuration details and strategies used to
            determine whether and under what options an object is cached is outside the control of the client
            using the cache.
            </remarks>
            <seealso cref="T:Blueprint.Core.Caching.ICachingStrategy"/>
        </member>
        <member name="M:Blueprint.Core.Caching.ICache.Add``1(System.String,System.Object,``0)">
            <summary>
            Adds an item to the cache.
            </summary>
            <remarks>
            If the value supplies is <c>null</c> this method becomes a no-op.
            </remarks>
            <param name="category">A category the value belongs to, used to specify 'profiles' of caching via.
            configuration such as 'Content', or 'Reports'.</param>
            <param name="key">The key used for identifying the value.</param>
            <param name="value">The value to be stored.</param>
            <typeparam name="T">The type of the value being inserted / retrieved, inferred by the return type
            of the constructor.</typeparam>
        </member>
        <member name="M:Blueprint.Core.Caching.ICache.ContainsKey``1(System.Object)">
            <summary>
            Returns a value indicating whether or not the cache contains a value against
            the given key.
            </summary>
            <param name="key">The unique identifier of the item.</param>
            <typeparam name="T">The type of the value being checked for existence</typeparam>
            <returns>Whether a value for the key exists within the cache.</returns>
        </member>
        <member name="M:Blueprint.Core.Caching.ICache.GetValue``1(System.Object)">
            <summary>
            Gets a value from this cache that has been previously stored using
            the specified key.
            </summary>
            <param name="key">
            The key that was used to store a value.
            </param>
            <typeparam name="T">
            The type of the object that has been stored.
            </typeparam>
            <returns>
            The value that had been previously stored for the key.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if a value has been stored for
            this key that is not of type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Blueprint.Core.Caching.ICache.Remove``1(System.Object)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">
            The key to remove the value for.
            </param>
            <typeparam name="T">
            The type of the value being inserted / retrieved, inferred by the return type
            of the constructor.
            </typeparam>
        </member>
        <member name="T:Blueprint.Core.Caching.CacheExtensions">
            <summary>
            Extensions class that augments the base <see cref="T:Blueprint.Core.Caching.ICache"/> interface with the <see cref="M:Blueprint.Core.Caching.CacheExtensions.GetOrCreate``1(Blueprint.Core.Caching.ICache,System.String,System.Object,System.Func{``0})"/>
            method that can handle the boilerplate associated with cache access that involves retrieving a value and
            storing if not available.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Caching.CacheExtensions.GetOrCreate``1(Blueprint.Core.Caching.ICache,System.Object,System.Func{``0})">
            <summary>
            Gets a value from this cache, constructing and storing a value should the cache
            not contain an item with the specified key.
            </summary>
            <param name="cache">
            The cache to work against.
            </param>
            <param name="key">
            The key of the value being retrieved.
            </param>
            <param name="constructor">
            A function that will construct the value to store in the cache if
            a value cannot be found.
            </param>
            <typeparam name="T">
            The type of the value being inserted / retrieved, inferred by the return type
            of the constructor.
            </typeparam>
            <returns>
            The cached value stored for the given key, or the result of executing the constructor
            function.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.CacheExtensions.GetOrCreate``1(Blueprint.Core.Caching.ICache,System.String,System.Object,System.Func{``0})">
            <summary>
            Gets a value from this cache, constructing and storing a value should the cache
            not contain an item with the specified key.
            </summary>
            <param name="cache">
            The cache to work against.
            </param>
            <param name="category">
            A category the value belongs to, used to specify 'profiles' of caching via.
            configuration such as 'Content', or 'Reports'.
            </param>
            <param name="key">
            The key of the value being retrieved.
            </param>
            <param name="constructor">
            A function that will construct the value to store in the cache if
            a value cannot be found.
            </param>
            <typeparam name="T">
            The type of the value being inserted / retrieved, inferred by the return type
            of the constructor.
            </typeparam>
            <returns>
            The cached value stored for the given key, or the result of executing the constructor
            function.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.CacheExtensions.GetOrCreateAsync``1(Blueprint.Core.Caching.ICache,System.String,System.Object,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Gets a value from this cache, constructing and storing a value should the cache
            not contain an item with the specified key.
            </summary>
            <param name="cache">
            The cache to work against.
            </param>
            <param name="category">
            A category the value belongs to, used to specify 'profiles' of caching via.
            configuration such as 'Content', or 'Reports'.
            </param>
            <param name="key">
            The key of the value being retrieved.
            </param>
            <param name="constructor">
            A function that will construct the value to store in the cache if
            a value cannot be found.
            </param>
            <typeparam name="T">
            The type of the value being inserted / retrieved, inferred by the return type
            of the constructor.
            </typeparam>
            <returns>
            The cached value stored for the given key, or the result of executing the constructor
            function.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Caching.ICacheProvider">
            <summary>
            Implements the port between the <see cref="T:Blueprint.Core.Caching.ICache"/> implementation and a specific caching
            technology (e.g. ASP.Net Cache, Redis).
            </summary>
            <remarks>
            A cache provider can assume that the keys, values and options have all been checked, managed
            and manipulated before being called, and can therefore provide a relatively light shim
            over the underlying technology for each method without having to worry around whether to
            actually cache a value of worrying about key clashes.
            </remarks>
        </member>
        <member name="M:Blueprint.Core.Caching.ICacheProvider.Add(System.String,System.Object,Blueprint.Core.Caching.CacheOptions)">
            <summary>
            Adds an item to the cache.
            </summary>
            <remarks>
            If the value supplies is <c>null</c> this method becomes a no-op.
            </remarks>
            <param name="key">
            The key used for identifying the value.
            </param>
            <param name="value">
            The value to be stored.
            </param>
            <param name="options">
            The options used to store the value.
            </param>
        </member>
        <member name="M:Blueprint.Core.Caching.ICacheProvider.ContainsKey(System.String)">
            <summary>
            Returns a value indicating whether or not the cache contains a value against
            the given key.
            </summary>
            <param name="key">
            The unique identifier of the item.
            </param>
            <returns>
            Whether a value for the key exists within the cache.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.ICacheProvider.GetValue(System.String)">
            <summary>
            Gets a value from this cache that has been previously stored using
            the specified key.
            </summary>
            <param name="key">
            The key that was used to store a value.
            </param>
            <returns>
            The value that had been previously stored for the key.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.ICacheProvider.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">
            The key to remove the value for.
            </param>
        </member>
        <member name="T:Blueprint.Core.Caching.ICachingStrategy">
            <summary>
            A caching strategy is used to determine how an object is stored in a cache, if
            at all.
            </summary>
            <remarks>
            <para>
            When caching a value using the <see cref="T:Blueprint.Core.Caching.ICache"/> service the option exists to
            specify the options by which a value should be cached. The alternative, and
            preferred approach, would be for the client to not worry about how a value
            may be cached. In this instance no options are passed and they are instead determined
            by an external strategy.
            </para>
            <para>
            It is the job of the strategy to determine how, and if, a value is to be stored
            in a cache. A default strategy should be expected to be injected in cases where
            no explicit strategy exists, with the default implementation to be not to cache
            any values.
            </para>
            </remarks>
        </member>
        <member name="P:Blueprint.Core.Caching.ICachingStrategy.Priority">
            <summary>
            Gets the priority of this caching strategy, which is used when determining what
            strategy to use should more than one be able to handle a given value. 
            The highest priority strategy will be picked, in the case of a tie the first registered 
            strategy wins.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Caching.ICachingStrategy.AppliesTo(System.String,System.Object)">
            <summary>
            Gets a value which indicates whether or not this strategy could handle the 
            specified key / value pair.
            </summary>
            <param name="category">
            A category that can be used to allow applying the same
            strategy to a group of related values (e.g. 'Content').
            </param>
            <param name="value">
            The value being inserted.
            </param>
            <returns>
            Whether or not this strategy will apply to the given pair.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.ICachingStrategy.GetOptions">
            <summary>
            Gets the options used to store the given key and value pair, returning
            CacheOptions.NotCached to indicate the value should not be cached.
            </summary>
            <returns>
            The options used to store the given key-value pair.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Caching.NoCache">
            <summary>
            Implements <see cref="T:Blueprint.Core.Caching.ICache" /> to be used in places that required no caching, for example in
            tests.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Caching.NoCache.Add``1(System.String,System.Object,``0)">
            <summary>
            Does nothing, will not add the item to cache.
            </summary>
            <param name="category">A category the value belongs to, used to specify 'profiles' of caching via.
            configuration such as 'Content', or 'Reports'.</param>
            <param name="key">The key used for identifying the value.</param>
            <param name="value">The value to be stored.</param>
            <typeparam name="T">The type of the value being inserted / retrieved, inferred by the return type
            of the constructor.</typeparam>
        </member>
        <member name="M:Blueprint.Core.Caching.NoCache.ContainsKey``1(System.Object)">
            <summary>
            Always returns false, as no items are ever added to this cache.
            </summary>
            <param name="key">The unique identifier of the item.</param>
            <typeparam name="T">The type of the value being checked for existence</typeparam>
            <returns><c>false</c></returns>
        </member>
        <member name="M:Blueprint.Core.Caching.NoCache.GetValue``1(System.Object)">
            <summary>
            Returns <c>default(T)</c>, as no items are ever added to this cache.
            </summary>
            <typeparam name="T">The type of the value to retrieve.</typeparam>
            <param name="key">The unique key to get.</param>
            <returns>The value of <c>default(T)</c>.</returns>
        </member>
        <member name="M:Blueprint.Core.Caching.NoCache.Remove``1(System.Object)">
            <summary>
            Does nothing, as nothing is ever added to the cache.
            </summary>
            <typeparam name="T">The type of the value to remove.</typeparam>
            <param name="key">The unique key to remove.</param>
        </member>
        <member name="T:Blueprint.Core.Caching.NoCacheProvider">
            <summary>
            Provides an implementation of <see cref="T:Blueprint.Core.Caching.ICacheProvider"/> that is a no-op.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Caching.NoCacheProvider.Add(System.String,System.Object,Blueprint.Core.Caching.CacheOptions)">
            <summary>
            Does nothing, the value will not be stored anywhere.
            </summary>
            <param name="key">
            The key used for identifying the value, not used.
            </param>
            <param name="value">
            The value to be stored, not used.
            </param>
            <param name="options">
            The options used to store the value, not used.
            </param>
        </member>
        <member name="M:Blueprint.Core.Caching.NoCacheProvider.ContainsKey(System.String)">
            <summary>
            Returns <c>false</c>, as no values are ever stored in the cache.
            </summary>
            <param name="key">
            The unique identifier of the item.
            </param>
            <returns>
            The value <c>false</c> on all occasions.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.NoCacheProvider.GetValue(System.String)">
            <summary>
            Returns <c>null</c>, as nothing is ever stored.
            </summary>
            <param name="key">
            The key that was used to store a value.
            </param>
            <returns>
            <c>null</c>, as nothing ever stored.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.NoCacheProvider.Remove(System.String)">
            <summary>
            Performs no action as no values are ever stored.
            </summary>
            <param name="key">
            The key to remove the value for.
            </param>
        </member>
        <member name="M:Blueprint.Core.Caching.RuntimeMemoryCacheProvider.#ctor(System.Runtime.Caching.MemoryCache)">
            <summary>
            Initializes a new instance of the memoryCacheProvider class using the
            provided  System.Runtime.Caching cache.
            </summary>
            <param name="memoryCache">
            The instance of <see cref="T:System.Runtime.Caching.MemoryCache"/> used as the actual cache storage.
            </param>
        </member>
        <member name="M:Blueprint.Core.Caching.RuntimeMemoryCacheProvider.Add(System.String,System.Object,Blueprint.Core.Caching.CacheOptions)">
            <summary>
            Performs the actual insert of a key / value pair and the options that apply to
            this cache item.
            </summary>
            <param name="key">
            The key of the item being inserted.
            </param>
            <param name="value">
            The non-null value to be stored.
            </param>
            <param name="options">
            The options of this cache item.
            </param>
        </member>
        <member name="M:Blueprint.Core.Caching.RuntimeMemoryCacheProvider.ContainsKey(System.String)">
            <summary>
            Returns a value indicating whether or not the cache contains a value against
            the given key.
            </summary>
            <param name="key">
            The unique identifier of the item.
            </param>
            <returns>
            Whether a value for the key exists within the cache.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.RuntimeMemoryCacheProvider.GetValue(System.String)">
            <summary>
            Gets the value stored in this cache with the given key.
            </summary>
            <param name="key">
            The unique key that represents the cache item to retrieve.
            </param>
            <returns>
            The value that has been stored in this cache for the given key, or <c>null</c>.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Caching.RuntimeMemoryCacheProvider.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">
            The key to remove the value for.
            </param>
        </member>
        <member name="T:Blueprint.Core.Data.IDatabaseConnectionFactory">
            <summary>
            Represents a small facade over the creation &amp; opening of a database
            connection to avoid relying directly on <see cref="T:System.Data.IDbConnection" /> or
            having to take a <see cref="T:System.Func`1"/> to create the connection.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Data.IDatabaseConnectionFactory.Open">
            <summary>
            Opens a new connection to the database, which should be done for small
            operations in a `using` clause.
            </summary>
            <remarks>
            It is the complete responsibility of clients of this method to manage the connection once it has
            been opened, to dispose and close the connection when done with.
            </remarks>
            <returns>An opened database connection</returns>
        </member>
        <member name="T:Blueprint.Core.Domain.AggregateRoot">
            <summary>
            Identifies an aggregate root within a system, a type of entity that defines consistency
            boundaries.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Entity">
            <summary>
            Represents an Entity, an object that has a physically persisted and unique representation
            in a backing store (database).
            </summary>
            <remarks>
            An entity may or may not be an aggregate root, the only defining characteristic is that it has
            its own identity (e.g. not a value object).
            </remarks>
        </member>
        <member name="P:Blueprint.Core.Entity.Id">
            <summary>
            Gets or sets the Id of this entity, which when creating a new entity will be a new integer
            as set in the constructor.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Entity.Equals(Blueprint.Core.Entity)">
            <summary>
            Indicates whether this entity is equal to the other given entity, which is defined
            as being the equality of the two Ids (e.g. two entities with different values but the
            same Id will be considered as equal).
            </summary>
            <param name="other">The other entity to check for equality.</param>
            <returns>Whether the other entity is the same as this one.</returns>
        </member>
        <member name="M:Blueprint.Core.Entity.Equals(System.Object)">
            <summary>
            Indicates whether or not the given object is the same as this Entity.
            </summary>
            <param name="obj">The object to check for equality.</param>
            <returns>Whether the given object is the same as this entity.</returns>
            <seealso cref="M:Blueprint.Core.Entity.Equals(Blueprint.Core.Entity)"/>
        </member>
        <member name="M:Blueprint.Core.Entity.GetHashCode">
            <summary>
            Gets the hash code of this entity, which is defined as the hash code of its
            <see cref="P:Blueprint.Core.Entity.Id"/>.
            </summary>
            <returns>The id of this entity.</returns>
        </member>
        <member name="M:Blueprint.Core.Errors.ErrorLogger.EnterTestMode">
            <summary>
            Enters 'test mode' for the error logger, which will allow collecting of exceptions that
            have been logged to allow interrogating them at the end of a test. Note calling this
            method clears any previously logged exceptions.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Errors.ErrorLogger.Populate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Given the error data passed by the caller of the error logging methods will give data providers
            the chance to populate extra information from the environment.
            </summary>
            <param name="errorData">The original error data given to the logging methods.</param>
            <returns>A non-null dictionary of error data, including that from registered providers.</returns>
        </member>
        <member name="F:Blueprint.Core.Errors.ErrorLogStatus.Ignored">
            <summary>
            Indicates the exception was ignored, because it is one that is of
            no importance to ops and is expected in the course of the application.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Errors.ErrorLogStatus.Recorded">
            <summary>
            Indicates the exception was recorded, that it was unexpected, and that the
            handler of this exception should continue to treat this as an unhandled
            exception (e.g. it may cause a task to fail and be retried).
            </summary>
        </member>
        <member name="T:Blueprint.Core.Errors.IErrorDataProvider">
            <summary>
            A provider of contextual error data that will be used whenever logging exceptions/errors
            to push to providers for easier diagnosis (for example HTTP data, current user data).
            </summary>
        </member>
        <member name="M:Blueprint.Core.Errors.IErrorDataProvider.Populate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Populates the given <see cref="T:System.Collections.Generic.Dictionary`2" /> with any values that would
            assist debugging the exception being recorded.
            </summary>
            <param name="errorData">The dictionary to populate.</param>
        </member>
        <member name="T:Blueprint.Core.Errors.IExceptionFilter">
            <summary>
            Provides a mechanism for ignoring exceptions for logging purposes, to indicate
            that an exception is 'normal' behaviour that does not need to have an alert raised.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Errors.IExceptionFilter.ShouldIgnore(System.Type,System.Exception)">
            <summary>
            Determines whether the given exception should be logged, providing both
            the type and actual exception to avoid each ruleset having to perform the
            <see cref="M:System.Object.GetType" /> method call.
            </summary>
            <param name="exceptionType">The type of the exception to check.</param>
            <param name="exception">The actual exception.</param>
            <returns>Whether this exception should be ignored for alerting purposes.</returns>
        </member>
        <member name="T:Blueprint.Core.Errors.IErrorLogger">
            <summary>
            An error logger takes unhandled exceptions and attempts to record / log them,
            using a set of <see cref="T:Blueprint.Core.Errors.IExceptionFilter"/>s and <see cref="T:Blueprint.Core.Errors.IExceptionSink"/>s.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Errors.IErrorLogger.Log(System.Exception,System.Object,Microsoft.AspNetCore.Http.HttpContext,Blueprint.Core.Errors.UserExceptionIdentifier)">
            <summary>
            Attempts to record the given exception, determining first whether it should be
            recorded at all (not recorded in essence suppresses the exception).
            </summary>
            <param name="exception">The exception to attempt to log.</param>
            <param name="errorData">Custom data that will be associated with the log entry for this exception (likely an anonymous object).</param>
            <param name="httpContext">The Asp.Net Core HttpContext, if available.</param>
            <param name="identifier">A user identifier that will be sent along with this error to track by-user.</param>
            <returns>The status of recording, useful to determine the next course of action depending
            on application.</returns>
        </member>
        <member name="M:Blueprint.Core.Errors.IErrorLogger.Log(System.String,System.Object,Microsoft.AspNetCore.Http.HttpContext,Blueprint.Core.Errors.UserExceptionIdentifier)">
            <summary>
            Attempts to record the given exception, determining first whether it should be
            recorded at all (not recorded in essence suppresses the exception).
            </summary>
            <param name="exceptionMessage">The exception message to attempt to log.</param>
            <param name="errorData">Custom data that will be associated with the log entry for this exception (likely an anonymous object).</param>
            <param name="httpContext">The Asp.Net Core HttpContext, if available.</param>
            <param name="identifier">A user identifier that will be sent along with this error to track by-user.</param>
            <returns>The status of recording, useful to determine the next course of action depending
            on application.</returns>
        </member>
        <member name="T:Blueprint.Core.Errors.IExceptionSink">
            <summary>
            Provides a means of recording exceptions that happen within an app that have not
            been caught and should not be ignored.
            </summary>
            <seealso cref="T:Blueprint.Core.Errors.IExceptionFilter" />
            <seealso cref="T:Blueprint.Core.Errors.IErrorLogger" />
        </member>
        <member name="T:Blueprint.Core.Guard">
            <summary>
            Common guard class for argument validation.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Guard.NotNull(System.String,System.Object)">
            <summary>
            Ensures the given <paramref name="value"/> is not null.
            Throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Blueprint.Core.Guard.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures the given string <paramref name="value"/> is not null or empty.
            Throws <see cref="T:System.ArgumentNullException"/> in the first case, or 
            <see cref="T:System.ArgumentException"/> in the latter.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> is null or an empty string.</exception>
        </member>
        <member name="T:Blueprint.Core.IClaimable">
            <summary>
            Identifies an entity / aggregate root that can be 'claimed', insomuch as it has
            a resource key that uniquely identifies it within a system and allows claims
            against the resource to be made.
            </summary>
        </member>
        <member name="P:Blueprint.Core.IClaimable.ResourceKey">
            <summary>
            Gets the resource key of this claimable entity.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.CachingConfigurationCollection_CreateNewElement_NotImplementedException_Message">
            <summary>
              Looks up a localized string similar to CreateNewElement should not be called due to overriding of IsElementName and CreateNewElement(string).
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.CachingOptionsElement_Cannot_Resolve_Type">
            <summary>
              Looks up a localized string similar to Cannot resolve type of &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.ClaimKeyProvider_UnknownResourceException_Message">
            <summary>
              Looks up a localized string similar to Cannot find any claim keys for the resource &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.ClaimRequiredAttributeNotFoundException_Message">
            <summary>
              Looks up a localized string similar to Please set at least one ClaimRequired attribute on the message &apos;{0}&apos;. If all users are allowed to send the message then use [MustBeAuthenticated]..
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.CommandBehaviourResult_Message">
            <summary>
              Looks up a localized string similar to Command executed with return code of &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.EnumerableExtensions_ToPage_PageNumberGreaterThanTotal">
            <summary>
              Looks up a localized string similar to The page number &apos;{0}&apos; specified is greater than the total number of pages..
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.InFutureAttribute_IsValid_NotDateTime_Message">
            <summary>
              Looks up a localized string similar to This attribute can only be assigned to string or DateTime property..
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.NoCommandHandlerFoundException_Message">
            <summary>
              Looks up a localized string similar to No command handler found for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.NotEmptyListAttribute_IsValid_NonEnumerableException_Message">
            <summary>
              Looks up a localized string similar to This attribute can only be assigned to collection property..
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.QueryHandlerBehaviour_InvokeQueryHandler_Cannot_Find_Handler">
            <summary>
              Looks up a localized string similar to No query handler found for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.SmtpClientEmailSender_EnvironmentHeader">
            <summary>
              Looks up a localized string similar to Appending hashed environment header of &apos;{0}&apos; to email message..
            </summary>
        </member>
        <member name="P:Blueprint.Core.Properties.Resources.ValidationException_Message">
            <summary>
              Looks up a localized string similar to Validation failed for message of type &apos;{0}&apos;. Failures were: {1}.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ResourceKey`1">
            <summary>
            Represents a resource key, a string that can uniquely identify a resource (e.g. an entity such as
            a user or an address), in the format of <em>[Type]</em>/<em>[Id]</em> where [Id] is a <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="P:Blueprint.Core.ResourceKey`1.Id">
            <summary>
            Gets the ID of the resource this resource key represents.
            </summary>
        </member>
        <member name="P:Blueprint.Core.ResourceKey`1.ResourceType">
            <summary>
            Gets the type this resource key represents.
            </summary>
        </member>
        <member name="M:Blueprint.Core.ResourceKey`1.Parse(System.String)">
            <summary>
            Converts the string representation of a ResourceKey to the equivalent ResourceKey structure.
            </summary>
            <param name="resourceKey">
            The resource key to convert.
            </param>
            <returns>
            The parsed resource key.
            </returns>
        </member>
        <member name="M:Blueprint.Core.ResourceKey`1.ParseId(System.String)">
            <summary>
            Extracts the id out of the given strig representation of a ResourceKey
            </summary>
            <param name="resourceKey">
            The resource key to convert.
            </param>
            <returns>
            The parsed resource key's id.
            </returns>
        </member>
        <member name="M:Blueprint.Core.ResourceKey`1.TryParse(System.String,Blueprint.Core.ResourceKey{`0}@)">
            <summary>
            Converts the string representation of a GUID to the equivalent Guid structure.
            </summary>
            <param name="resourceKey">
            The resource key to convert.
            </param>
            <param name="parsedResourceKey">
            The structure that will contain the parsed value.
            </param>
            <returns>
            True if the resource key can be parsed.
            </returns>
        </member>
        <member name="M:Blueprint.Core.ResourceKey`1.ToString">
            <summary>
            Returns the string repersentation of the resource key in for format of [Type]/[Id].
            </summary>
            <returns>
            The resource key string.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Security.EncryptorExtensions">
            <summary>
            Provides extension methods to <see cref="T:Blueprint.Core.Security.IEncryptor"/> to allow decrypting /
            encrypting different types of objects, using the underlying byte encryption
            methods of the extended IEncryptor.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Security.EncryptorExtensions.Decrypt(Blueprint.Core.Security.IEncryptor,System.String)">
            <summary>
            Decrypts a string value, with the encrypted string having been obtained
            by encrypting using the <see cref="M:Blueprint.Core.Security.EncryptorExtensions.Encrypt(Blueprint.Core.Security.IEncryptor,System.String)"/> method.
            </summary>
            <param name="encryptor">The encryptor that will perform the actual decryption.</param>
            <param name="value">The value to be decrypted.</param>
            <returns>The decrypted value.</returns>
        </member>
        <member name="M:Blueprint.Core.Security.EncryptorExtensions.Encrypt(Blueprint.Core.Security.IEncryptor,System.String)">
            <summary>
            Encrypts the given string value, turning it into a Base64 encoded string
            that can be stored and passed around before being decrypted using the
            <see cref="M:Blueprint.Core.Security.EncryptorExtensions.Decrypt(Blueprint.Core.Security.IEncryptor,System.String)"/> method.
            </summary>
            <param name="encryptor">The encryptor that will perform the actual encryption.</param>
            <param name="value">The value to be encrypted.</param>
            <returns>The encrypted, base64 encoded version of the string passed in.</returns>
        </member>
        <member name="T:Blueprint.Core.Security.IEncryptor">
            <summary>
            Provides encryption and decryption services, working at the byte array level.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Security.IEncryptor.Decrypt(System.Byte[])">
            <summary>
            Decrypts the given byte array.
            </summary>
            <param name="value">Byte array value to be decrypted.</param>
            <returns>Decrypted byte array.</returns>
        </member>
        <member name="M:Blueprint.Core.Security.IEncryptor.Encrypt(System.Byte[])">
            <summary>
            Encrypts the given byte array.
            </summary>
            <param name="value">Byte array value to be encrypted.</param>
            <returns>Encrypted byte array.</returns>
        </member>
        <member name="P:Blueprint.Core.Security.IUserAuthorisationContext.IsActive">
            <summary>
            Gets a value indicating whether the user can be considered 'active', which means that
            have access to the site (even if not a particular section due to their privileges).
            </summary>
        </member>
        <member name="P:Blueprint.Core.Security.IUserAuthorisationContext.IsAnonymous">
            <summary>
            Gets a value indicating whether the user is using the site without being logged in
            </summary>
        </member>
        <member name="M:Blueprint.Core.Security.IUserAuthorisationContext.PopulateMetadata(System.Action{System.String,System.Object})">
            <summary>
            Populates metadata about this user using the given action which adds data to the destination
            store.
            </summary>
            <param name="add">The action to call to add data about this user to.</param>
        </member>
        <member name="T:Blueprint.Core.Security.KeyIVPair">
            <summary>
            A Key / Initialisation Vector pair which is to be provided to an encryption service to
            generate the required values when performing encryption or decryption.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Security.KeyIVPair.FromPassword(System.String)">
            <summary>
            Creates a new KeyIVPair from the given password string.
            </summary>
            <param name="password">The unique password key to be used.</param>
            <returns>A KeyIVPair based on the given password.</returns>
        </member>
        <member name="M:Blueprint.Core.Security.KeyIVPair.GetIV(System.Int32)">
            <summary>
            Gets a byte array of the given size to be used as an initialisation vector in a symmetric 
            cryptography algorithm..
            </summary>
            <param name="size">The size of the key to generate.</param>
            <returns>A byte array to be used as an initialisation vector.</returns>
        </member>
        <member name="M:Blueprint.Core.Security.KeyIVPair.GetKey(System.Int32)">
            <summary>
            Gets a byte array of the given size to be used as a key in a symmetric cryptography algorithm.
            </summary>
            <param name="size">The size of the key to generate.</param>
            <returns>A byte array to be used as a key.</returns>
        </member>
        <member name="T:Blueprint.Core.Security.PasswordHash">
            <summary>
            Salted password hashing with PBKDF2-SHA1.
            Author: havoc AT defuse.ca
            www: http://crackstation.net/hashing-security.htm
            </summary>
        </member>
        <member name="M:Blueprint.Core.Security.PasswordHash.CreateHash(System.String)">
            <summary>
            Creates a salted PBKDF2 hash of the password.
            </summary>
            <param name="password">The password to hash.</param>
            <returns>The hash of the password.</returns>
        </member>
        <member name="M:Blueprint.Core.Security.PasswordHash.FromHash(System.String)">
            <summary>
            From a string representation of a <see cref="T:Blueprint.Core.Security.PasswordHash" /> creates the original
            password hash representation.
            </summary>
            <param name="hash">The string representation of the password hash.</param>
            <returns>The reconstructed password hash.</returns>
        </member>
        <member name="M:Blueprint.Core.Security.PasswordHash.IsValid(System.String)">
            <summary>
            Validates that the specified password matches this hashed password.
            </summary>
            <param name="password">The password to check.</param>
            <returns><c>true</c> if the password is correct. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Blueprint.Core.Security.PasswordHash.SlowEquals(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays in length-constant time. This comparison
            method is used so that password hashes cannot be extracted from 
            on-line systems using a timing attack and then attacked off-line.
            </summary>
            <param name="a">The first byte array.</param>
            <param name="b">The second byte array.</param>
            <returns>True if both byte arrays are equal. False otherwise.</returns>
        </member>
        <member name="M:Blueprint.Core.Security.PasswordHash.Pbkdf2(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the PBKDF2-SHA1 hash of a password.
            </summary>
            <param name="password">The password to hash.</param>
            <param name="salt">The salt.</param>
            <param name="iterations">The PBKDF2 iteration count.</param>
            <param name="outputBytes">The length of the hash to generate, in bytes.</param>
            <returns>A hash of the password.</returns>
        </member>
        <member name="M:Blueprint.Core.Security.PasswordHash.ToString">
            <summary>
            Returns the string representation of this password, which is how the hash should
            be stored in the persistent store of the application.
            </summary>
            <returns>The string representation of this hash.</returns>
            <seealso cref="M:Blueprint.Core.Security.PasswordHash.FromHash(System.String)" />
        </member>
        <member name="T:Blueprint.Core.Security.SymmetricAlgorithmEncryptor`1">
            <summary>
            Provides an implementation of IEncryptionService which uses a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>
            to provide the cryptographic implementation.
            </summary>
            <typeparam name="T">The algorithm class which this implementation uses.</typeparam>
        </member>
        <member name="M:Blueprint.Core.Security.SymmetricAlgorithmEncryptor`1.#ctor(System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,Blueprint.Core.Security.KeyIVPair)">
            <summary>
            Initializes a new instance of the SymmetricAlgorithmEncryptor class.
            </summary>
            <param name="cipherMode">The cipher mode to use.</param>
            <param name="paddingMode">The padding mode to use.</param>
            <param name="keyIVPair">The Key/IV pair to use.</param>
        </member>
        <member name="M:Blueprint.Core.Security.SymmetricAlgorithmEncryptor`1.Decrypt(System.Byte[])">
            <summary>
            Decrypts the given byte array.
            </summary>
            <param name="value">Byte array value to be decrypted.</param>
            <returns>Decrypted byte array.</returns>
        </member>
        <member name="M:Blueprint.Core.Security.SymmetricAlgorithmEncryptor`1.Encrypt(System.Byte[])">
            <summary>
            Encrypts the given byte array.
            </summary>
            <param name="value">Byte array value to be encrypted.</param>
            <returns>Encrypted byte array.</returns>
        </member>
        <member name="T:Blueprint.Core.SystemTime">
            <summary>
            Provides an abstraction over DateTime, and in particular the current time, to allow easier testing
            of time-sensitive functions.
            </summary>
            <remarks>
            Any function that requires access to the current time should instead use the <see cref="P:Blueprint.Core.SystemTime.UtcNow"/>
            property as tests can change this, unlike if DateTime.Now was used, which can not be mocked out and
            manipulated.
            </remarks>
        </member>
        <member name="P:Blueprint.Core.SystemTime.UtcNow">
            <summary>
            Gets the current date and time, as defined by the current <see cref="F:Blueprint.Core.SystemTime.getUtcNow"/> method, which in
            a production environment would simply delegate to <see cref="P:System.DateTime.UtcNow"/>.
            </summary>
        </member>
        <member name="P:Blueprint.Core.SystemTime.Now">
            <summary>
            Gets the current date and time, as defined by the current <see cref="F:Blueprint.Core.SystemTime.getNow"/> method, which in
            a production environment would simply delegate to <see cref="P:System.DateTime.Now"/>.
            </summary>
        </member>
        <member name="M:Blueprint.Core.SystemTime.PlayTimelord">
            <summary>
            Starts 'timelord mode' where it is possible to control time for any client that
            uses the <see cref="T:Blueprint.Core.SystemTime" /> properties to get the current time.
            </summary>
            <remarks>
            This method will set the time to a static value the same as <see cref="P:System.DateTime.UtcNow" />
            at the time of execution.
            </remarks>
            <returns>A <see cref="T:Blueprint.Core.SystemTime.SystemTimeModifier" /> which allows for modification of time.</returns>
        </member>
        <member name="M:Blueprint.Core.SystemTime.RestoreDefault">
            <summary>
            Restores <see cref="P:Blueprint.Core.SystemTime.UtcNow"/> to its default of returning <see cref="P:System.DateTime.UtcNow"/>.
            Restores <see cref="P:Blueprint.Core.SystemTime.Now"/> to its default of returning <see cref="P:System.DateTime.Now"/>.
            </summary>
        </member>
        <member name="P:Blueprint.Core.SystemTime.SystemTimeModifier.UtcNow">
            <summary>
            Gets the current date and time, as defined by the current <see cref="F:Blueprint.Core.SystemTime.getUtcNow"/> method, which in
            a production environment would simply delegate to <see cref="P:System.DateTime.UtcNow"/>.
            </summary>
        </member>
        <member name="P:Blueprint.Core.SystemTime.SystemTimeModifier.Now">
            <summary>
            Gets the current date and time, as defined by the current <see cref="F:Blueprint.Core.SystemTime.getNow"/> method, which in
            a production environment would simply delegate to <see cref="P:System.DateTime.Now"/>.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Tasks.BackgroundTask">
            <summary>
            Represents a task, a unit of work that is typically executed out of process, such
            that immediate execution is not required.
            </summary>
            <remarks>
            <para>
            An <see cref="T:Blueprint.Core.Tasks.BackgroundTask"/> is implemented as two parts, the task definition which is
            a simple data-bag class that implements this marker interface, plus an implementation
            of an <see cref="T:Blueprint.Core.Tasks.IBackgroundTaskHandler`1"/> that performs the actual execution given
            a task definition.
            </para>
            <para>
            To execute / schedule a background task use <see cref="T:Blueprint.Core.Tasks.IBackgroundTaskScheduler"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Blueprint.Core.Tasks.BackgroundTask.#ctor">
            <summary>
            Initialises a new instance of <see cref="T:Blueprint.Core.Tasks.BackgroundTask" />, setting <see cref="P:Blueprint.Core.Tasks.BackgroundTask.Metadata"/> to a new
            <see cref="T:Blueprint.Core.Tasks.BackgroundTaskMetadata" /> with it's <see cref="P:Blueprint.Core.Tasks.BackgroundTaskMetadata.RequestId" /> property
            set to <see cref="!:RequestIdAccessor.Id" />.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Tasks.BackgroundTask.Metadata">
            <summary>
            Gets or sets the envelope of this background task that helps to identify metadata about
            </summary>
        </member>
        <member name="T:Blueprint.Core.Tasks.BackgroundTaskContext">
            <summary>
            Represents the context of a running task, providing the ability to store arbitrary pieces of
            data for a task (based only on task type, so shared across all runs no matter the properties).
            </summary>
        </member>
        <member name="P:Blueprint.Core.Tasks.BackgroundTaskContext.Key">
            <summary>
            Gets the key of this context, a value that identifies the context in the system. This value will
            NOT be unique per execution but is instead usually shared between task <b>types</b>.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Tasks.BackgroundTaskContext.Empty">
            <summary>
            Creates a new 'empty' <see cref="T:Blueprint.Core.Tasks.BackgroundTaskContext"/> which will not have any data that
            can be loaded and uses an <see cref="T:Blueprint.Core.Tasks.InMemoryBackgroundTaskContextProvider"/>.
            </summary>
            <returns>A new 'empty' context.</returns>
        </member>
        <member name="M:Blueprint.Core.Tasks.BackgroundTaskContext.WithData(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new <see cref="T:Blueprint.Core.Tasks.BackgroundTaskContext"/> that will be able to get data from the given dictionary, and uses
            an <see cref="T:Blueprint.Core.Tasks.InMemoryBackgroundTaskContextProvider"/>.
            </summary>
            <returns>A new 'empty' context.</returns>
        </member>
        <member name="M:Blueprint.Core.Tasks.BackgroundTaskContext.GetAsync``1(System.String)">
            <summary>
            Gets a value that has previously been stored in this context, loading data on-demand to avoid overhead for
            every task that may not have any data (i.e. do not pre-load as most would be empty operations)
            </summary>
            <param name="key">The key of the item to be loaded.</param>
            <typeparam name="T">The type of the value that has been stored.</typeparam>
            <returns>The stored value, or <c>default(T)</c> if it does not exist.</returns>
        </member>
        <member name="M:Blueprint.Core.Tasks.BackgroundTaskContext.Set(System.String,System.Object)">
            <summary>
            Sets a value for the given key, which will be persisted on completion of the task this context is for and be
            available through the <see cref="M:Blueprint.Core.Tasks.BackgroundTaskContext.GetAsync``1(System.String)"/> method immediately and on subsequent runs.
            </summary>
            <param name="key">The non-null key of the item to set.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:Blueprint.Core.Tasks.BackgroundTaskContext.SaveAsync">
            <summary>
            Saves any changes that have been made to the data of this context, using the supplied <see cref="T:Blueprint.Core.Tasks.IBackgroundTaskContextProvider" />.
            </summary>
            <returns>A task representing the save operation</returns>
        </member>
        <member name="T:Blueprint.Core.Tasks.BackgroundTaskMetadata">
            <summary>
            Contains metadata about a task that is to be executed / scheduled, containing information like
            who is executing the task, where it comes from etc. to enable better diagnostics of
            executed tasks.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Tasks.BackgroundTaskMetadata.RequestId">
            <summary>
            Gets or sets the request id associated with the code that triggered the associated
            background task.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Tasks.BackgroundTaskMetadata.RequestBaggage">
            <summary>
            Gets or sets the request 'baggage' that is used to pass around context data about requests through
            distributed systems.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Tasks.BackgroundTaskMetadata.System">
            <summary>
            Gets or sets the source system that triggered the associated background task.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Tasks.BackgroundTaskMetadata.SystemVersion">
            <summary>
            Gets or sets the source system that triggered the associated background task.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Tasks.BackgroundTaskMetadata.InitiatingUser">
            <summary>
            Gets or sets the identifier of the user that triggered the associated background task.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Tasks.IBackgroundTaskContextProvider">
            <summary>
            Represents a provider that can save and load data used to provide task related, unstructured
            data for a <see cref="T:Blueprint.Core.Tasks.BackgroundTaskContext" />.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Tasks.IBackgroundTaskContextProvider.GetDataAsync(System.String)">
            <summary>
            Given a key representing the task context gets all previously saved data that is available.
            </summary>
            <param name="contextKey">The key of the data to load.</param>
            <returns>A task resulting in a dictionary of previously saved data, which may be empty.</returns>
        </member>
        <member name="T:Blueprint.Core.Tasks.IBackgroundTaskExecutionPostProcessor">
            <summary>
            The post-processor that will apply to task execution, handling things such as saving data
            modified (transactional) and pushing new tasks that have been enqueued.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Tasks.IBackgroundTaskExecutionPostProcessor.PostProcessAsync(Blueprint.Core.Tasks.BackgroundTask)">
            <summary>
            Performs any necessary work after the processing of the specified task has successfully
            completed.
            </summary>
            <param name="backgroundTask">The task that has been successfully executed.</param>
            <returns>A task representing the execution.</returns>
        </member>
        <member name="T:Blueprint.Core.Tasks.IBackgroundTaskScheduleProvider">
            <summary>
            A provider that implements the integration point to actually run a task in the background, once things
            like preprocessing and time window handling has occurred.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Tasks.IBackgroundTaskScheduler">
            <summary>
            A background task 'executor', something that can take an instance of <see cref="T:Blueprint.Core.Tasks.BackgroundTask"/>
            and push it's execution to a background process.
            </summary> 
            <remarks>
            A task represents an action that should be performed out-of-process, and has
            no need to be executed immediately (e.g. it may be stored and executed at a later time
            with no negative impact on the system and its operation)
            </remarks>
            <remarks>
            A task scheduler will queue up the tasks that are  passed and only attempt to execute / schedule them when
            <see cref="M:Blueprint.Core.Tasks.IBackgroundTaskScheduler.RunNowAsync" /> is called, allowing for tasks to be scheduled at any time during a request but
            only be "released" when the rest of thew request / transaction is successful.
            </remarks>
        </member>
        <member name="M:Blueprint.Core.Tasks.IBackgroundTaskScheduler.EnqueueAsync``1(``0)">
            <summary>
            Enqueues the given task, but <b>does not</b> immediately execute it as that is done through a call
            to <see cref="M:Blueprint.Core.Tasks.IBackgroundTaskScheduler.RunNowAsync" />.
            </summary>
            <param name="task">The task.</param>
            <returns>A scheduled task that can be used to perform further operations, such as adding
            a continuation task.</returns>
        </member>
        <member name="M:Blueprint.Core.Tasks.IBackgroundTaskScheduler.ScheduleAsync``1(``0,System.TimeSpan)">
            <summary>
            Scheduled the given task to be executed after a specified delay, but <b>does not</b> immediately
            do so, only being scheduled through a call to <see cref="M:Blueprint.Core.Tasks.IBackgroundTaskScheduler.RunNowAsync" />.
            </summary>
            <param name="task">The task.</param>
            <param name="delay">The amount of time to wait before executing this task.</param>
            <returns>A scheduled task that can be used to perform further operations, such as adding
            a continuation task.</returns>
        </member>
        <member name="M:Blueprint.Core.Tasks.IBackgroundTaskScheduler.RunNowAsync">
            <summary>
            Runs all enqueued and scheduled tasks that have been queued up with this task scheduler.
            </summary>
            <returns>A task representing this operation.</returns>
        </member>
        <member name="T:Blueprint.Core.Tasks.IHaveTaskCategory">
            <summary>
            An interface that allows the categorisation of tasks based on their runtime data, in addition
            to their static type.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Tasks.IScheduledBackgroundTask">
            <summary>
            Represents a scheduled background task.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Tasks.IScheduledBackgroundTask.ContinueWith(Blueprint.Core.Tasks.BackgroundTask,Blueprint.Core.Tasks.JobContinuationOptions)">
            <summary>
            Adds a new task that will execute *after* this task, with options to determine whether it should
            run onl on successful execution (the default) or not.
            </summary>
            <param name="backgroundTask">The task to execute.</param>
            <param name="options">Options used to determine in what state the task should be considered for execution.</param>
            <returns>A new scheduled background task.</returns>
        </member>
        <member name="M:Blueprint.Core.Tasks.IScheduledTaskRepository.GetTasks(System.Reflection.Assembly)">
            <summary>
            Gets the tasks.
            </summary>
            <param name="assembly">The assembly to load tasks from.</param>
            <returns>
            All tasks from the named dll that implement ITask, returning the task's full name, CRON expression and the scheduled task, if there is one.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Tasks.IBackgroundTaskHandler`1">
            <summary>
            Represents a task handler, something that knows how to execute a given type
            of <see cref="T:Blueprint.Core.Tasks.BackgroundTask"/>.
            </summary>
            <typeparam name="T">The type of the task this handler can execute.</typeparam>
        </member>
        <member name="M:Blueprint.Core.Tasks.IBackgroundTaskHandler`1.HandleAsync(`0,Blueprint.Core.Tasks.BackgroundTaskContext)">
            <summary>
            Handles the given task, performing any necessary actions required to action
            the task.
            </summary>
            <remarks>
            A task will be deemed successful if no exception is raised from this method, meaning
            a failure <b>must</b> be indicated by an exception being thrown and that a task should
            typically no perform much exceptional error handling itself, instead allowing the
            client to perform those checks.
            </remarks>
            <param name="task">The task to be executed.</param>
            <param name="context">A context for the task _type_, allowing</param>
        </member>
        <member name="T:Blueprint.Core.Tasks.NoTaskHandlerFoundException">
            <summary>
            An exception that is thrown if no task handler is found.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Tasks.NoTaskHandlerFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Tasks.NoTaskHandlerFoundException"/> class.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Tasks.NoTaskHandlerFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Tasks.NoTaskHandlerFoundException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Blueprint.Core.Tasks.NoTaskHandlerFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Tasks.NoTaskHandlerFoundException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="inner">
            The inner exception.
            </param>
        </member>
        <member name="M:Blueprint.Core.Tasks.NoTaskHandlerFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Tasks.NoTaskHandlerFoundException"/> class.
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="T:Blueprint.Core.Tasks.TaskExecutor">
            <summary>
            Resolves an appropriate task handler and allows it to perform the required action for the task.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Tasks.TaskExecutor.#ctor(StructureMap.IContainer,Blueprint.Core.Errors.IErrorLogger,Blueprint.Core.Apm.IApmTool)">
            <summary>
            Instantiates a new instance of the class TaskExecutor.
            </summary>
            <param name="container">The parent container.</param>
            <param name="errorLogger">Error logger to track thrown exceptions.</param>
            <param name="apmTool">APM operation tracker to track individual task executions.</param>
        </member>
        <member name="M:Blueprint.Core.Tasks.TaskExecutor.Execute(Blueprint.Core.Tasks.BackgroundTask,Hangfire.Server.PerformContext)">
            <summary>
            Resolves a task handler for the given command context and, if found, hands off
            execution to the command handler.
            </summary>
            <param name="task">The task to be executed.</param>
            <param name="context">The Hangfire context.</param>
        </member>
        <member name="M:Blueprint.Core.Tasks.TaskScheduler.GetSchedulers">
            <summary>
            Gets all the schedulers that have been registered.
            </summary>
            <remarks>
            We ask for new schedulers every time to ensure that dependencies that should be transient are (e.g. a
            database context should be new every time a scheduler is called)
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Blueprint.Core.TemporalCheck">
            <summary>
            Used with the four diffnt time based attributes. 
            This is used to specify weather the Date or DateTime 
            should be used for checking where the provided date falls.
            </summary>
        </member>
        <member name="F:Blueprint.Core.TemporalCheck.Date">
            <summary>
            Only look at the Date part of a DateTime.
            </summary>
        </member>
        <member name="F:Blueprint.Core.TemporalCheck.DateTime">
            <summary>
            Use the whole DateTime.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:Blueprint.Core.ThirdParty.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.ThirdParty.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required">
            <c>true</c> if a element should be localized; otherwise, <c>false</c>.
            </param>
        </member>
        <member name="P:Blueprint.Core.ThirdParty.LocalizationRequiredAttribute.Required">
            <summary>
            Gets or sets a value indicating whether a element should be localized.
            <value>
            <c>true</c> if a element should be localized; otherwise, <c>false</c>.
            </value>
            </summary>
        </member>
        <member name="M:Blueprint.Core.ThirdParty.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:Blueprint.Core.ThirdParty.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">
            The object to test the value equality of. 
            </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Blueprint.Core.ThirdParty.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Blueprint.Core.ThirdParty.LocalizationRequiredAttribute"/>.
            </returns>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form.
            </summary>
        </member>
        <member name="M:Blueprint.Core.ThirdParty.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.ThirdParty.StringFormatMethodAttribute"/> class. 
            Initializes new instance of StringFormatMethodAttribute.
            </summary>
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string.
            </param>
        </member>
        <member name="P:Blueprint.Core.ThirdParty.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:Blueprint.Core.ThirdParty.AssertionConditionAttribute"/> attribute.
            </summary>
            <seealso cref="T:Blueprint.Core.ThirdParty.AssertionConditionAttribute"/>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:Blueprint.Core.ThirdParty.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:Blueprint.Core.ThirdParty.AssertionConditionType"/>
        </member>
        <member name="M:Blueprint.Core.ThirdParty.AssertionConditionAttribute.#ctor(Blueprint.Core.ThirdParty.AssertionConditionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.ThirdParty.AssertionConditionAttribute"/> class. 
            Initializes new instance of AssertionConditionAttribute.
            </summary>
            <param name="conditionType">
            Specifies condition type.
            </param>
            .
        </member>
        <member name="P:Blueprint.Core.ThirdParty.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:Blueprint.Core.ThirdParty.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true.
            </summary>
        </member>
        <member name="F:Blueprint.Core.ThirdParty.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false.
            </summary>
        </member>
        <member name="F:Blueprint.Core.ThirdParty.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value.
            </summary>
        </member>
        <member name="F:Blueprint.Core.ThirdParty.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types.
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:Blueprint.Core.ThirdParty.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.ThirdParty.BaseTypeRequiredAttribute"/> class. 
            Initializes new instance of BaseTypeRequiredAttribute.
            </summary>
            <param name="baseType">
            Specifies which types are required.
            </param>
        </member>
        <member name="P:Blueprint.Core.ThirdParty.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="P:Blueprint.Core.ThirdParty.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="P:Blueprint.Core.ThirdParty.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used.
            </summary>
        </member>
        <member name="F:Blueprint.Core.ThirdParty.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used.
            </summary>
        </member>
        <member name="F:Blueprint.Core.ThirdParty.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member.
            </summary>
        </member>
        <member name="F:Blueprint.Core.ThirdParty.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Blueprint.Core.ThirdParty.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:Blueprint.Core.ThirdParty.MeansImplicitUseAttribute"/> or <see cref="T:Blueprint.Core.ThirdParty.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:Blueprint.Core.ThirdParty.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used.
            </summary>
        </member>
        <member name="F:Blueprint.Core.ThirdParty.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is delegate, indicates that delegate is executed while the method is executed.
            If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.PureAttribute">
            <summary>
            Indicates that method doesn't contain observable side effects.
            The same as <see cref="T:System.Diagnostics.Contracts.PureAttribute"/>.
            </summary>
        </member>
        <member name="T:Blueprint.Core.ThirdParty.ReCaptchaConfiguration">
            <summary>
            Represents the configuration section that is used to configure ReCaptcha assemblies.
            </summary>
            <example>
            <configuration>
              <configSections>
                <section name="reCaptcha" type="Blueprint.Core.ThirdParty.ReCaptchaConfiguration, Blueprint.Core"/>
              </configSections> 
              <reCaptcha privateKey="000000000000000000000" publicKey="00000000000000000000000000"/>
            </configuration>
            </example>
        </member>
        <member name="P:Blueprint.Core.ThirdParty.ReCaptchaConfiguration.Current">
            <summary>
            Gets the current configuration of the ReCaptcha component.
            </summary>
        </member>
        <member name="P:Blueprint.Core.ThirdParty.ReCaptchaConfiguration.PrivateKey">
            <summary>
            Gets the private key.
            </summary>
        </member>
        <member name="P:Blueprint.Core.ThirdParty.ReCaptchaConfiguration.PublicKey">
            <summary>
            Gets the public key.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Tracing.IVersionInfoProvider">
            <summary>
            Apps are expected to implement <see cref="T:Blueprint.Core.Tracing.IVersionInfoProvider" /> to provide a <see cref="T:Blueprint.Core.Tracing.VersionInfo" />
            object that describes the running application which is then used for tracing, for example in
            background tasks metadata.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Tracing.IVersionInfoProvider.Value">
            <summary>
            Gets the version information for the currently running application.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Tracing.RequestIdLayoutRenderer">
            <summary>
            A layout renderer to be used with NLog that will output the value of <see cref="P:System.Diagnostics.Activity.Id"/> from <see cref="P:System.Diagnostics.Activity.Current" />.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Tracing.RequestIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Will append the value of <see cref="P:System.Diagnostics.Activity.Id"/> from <see cref="P:System.Diagnostics.Activity.Current" />.
            </summary>
            <param name="builder">The builder to which the request identifier will be appended.</param>
            <param name="logEvent">The log event that has caused this layout renderer to be executed, ignore.</param>
        </member>
        <member name="T:Blueprint.Core.Utilities.CommonRegularExpressions">
            <summary>
            Provides a number of regular expressions for common scenarios such as postcodes and email
            addresses, ensuring that projects can use these expressions knowing they have already been
            tested and to avoid littering many projects with many expressions, usually all slightly
            modified.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.EmailPattern">
            <summary>
            A regular expression pattern which represents an email address, attempting to filter our the majority
            of incorrect email addresses whilst avoiding false-negatives.
            </summary>
            <remarks>
            Although this pattern will catch the vast majority of bad email addresses it can not be relied upon
            for validating the email address is actually correct, only sending an email can do that.
            </remarks>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.PhoneNumberPattern">
            <summary>
            A regular expression pattern which attempts to match a phone number.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.UKPostcodePattern">
            <summary>
            Attempts to match a UK postcode, eliminating many of the invalid postcodes which do not follow patterns set
            out by postal service, such as the valid characters in certain positions.
            </summary>
            <remarks>
            As with validating email addresses a postcode that matches this regular expression does not guarantee the
            postcode is valid, only other checks could verify this.
            </remarks>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.UrlPattern">
            <summary>
            A regular expression pattern which attempts to match a Url, one which is either an FTP or HTTP (or no protocol), either plain
            or secure (HTTPS / FTPS), with optional path and query string.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.UrlWithProtocolPattern">
            <summary>
            A regular expression pattern which attempts to match a Url, one which is either an FTP or HTTP (or no protocol), either plain
            or secure (HTTPS / FTPS), with optional path and query string.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.Email">
            <summary>
            A regular expression that can be used to find email addresses within a string, using word
            boundaries to separate an email address from the surrounding text.
            </summary>
            <remarks>
            Although this pattern will catch the vast majority of bad email addresses it can not be relied upon
            for validating the email address is actually correct,only sending an email can do that.
            </remarks>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.EmailOnly">
            <summary>
            A regular expression to determine whether or not a string matches an email and nothing else,
            cannot be used to find emails within other text.
            </summary>
            <remarks>
            Although this pattern will catch the vast majority of bad email addresses it can not be relied upon
            for validating the email address is actually correct,only sending an email can do that.
            </remarks>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.PhoneNumber">
            <summary>
            A regular expression that can be used to find phone numbers within a string, using word
            boundaries to separate a phone number from the surrounding text.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.PhoneNumberOnly">
            <summary>
            A regular expression to determine whether or not a string matches a phone number and nothing else,
            cannot be used to find phone numbers within other text.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.UKPostcode">
            <summary>
            A regular expression that can be used to find UK postcodes within a string, using word
            boundaries to separate an email address from the surrounding text.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.UKPostcodeOnly">
            <summary>
            A regular expression to determine whether or not a string matches a UK postcode and nothing else,
            cannot be used to find emails within other text.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.Url">
            <summary>
            A regular expression that can be used to find URLs within a string, using word
            boundaries to separate an email address from the surrounding text.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.UrlOnly">
            <summary>
            A regular expression to determine whether or not a string matches a URL and nothing else,
            cannot be used to find emails within other text.
            </summary>
        </member>
        <member name="F:Blueprint.Core.Utilities.CommonRegularExpressions.UrlWithProtocol">
            <summary>
            A regular expression to determine whether or not a string matches a URL and nothing else,
            cannot be used to find emails within other text.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Utilities.ConfigHelper.Configuration">
            <summary>
            Sets the .NET Core <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot" /> in the case that we are running in core, using this
            instead of ConfigurationManager to load settings.
            </summary>
        </member>
        <member name="T:Blueprint.Core.Utilities.DateTimeExtensions">
            <summary>
            Provides a number of extension methods of the built-in <see cref="T:System.DateTime"/> struct.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.DateTimeExtensions.EndOfDay(System.DateTime)">
            <summary>
            Given a DateTime will get the last second of the day that it represents, with ticks set to 0, 
            that is 23:59:59.000. 
            </summary>
            <param name="dateTime">The date time from which to get the end of the day</param>
            <returns>The 'end of the day' of the given DateTime instance.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.DateTimeExtensions.IsInFuture(System.DateTime,Blueprint.Core.TemporalCheck)">
            <summary>
            Returns a value indicating whether of not this date is in the future, based on the
            value of <see cref="P:Blueprint.Core.SystemTime.UtcNow"/>.
            </summary>
            <param name="date">
            The date to check.
            </param>
            <param name="temporalCheckType">The type of check to perform.</param>
            <returns>Whether the given date is in the future.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.DateTimeExtensions.IsInPast(System.DateTime,Blueprint.Core.TemporalCheck)">
            <summary>
            Returns a value indicating whether of not this date is in the past, based on the
            value of <see cref="P:Blueprint.Core.SystemTime.UtcNow"/>.
            </summary>
            <param name="date">
            The date to check.
            </param>
            <param name="temporalCheckType">The type of check to perform.</param>
            <returns>Whether the given date is in the past.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.DateTimeExtensions.GetPreviousDate(System.DateTime,System.Collections.Generic.IEnumerable{System.DayOfWeek})">
            <summary>
            Gets the date of the previous valid day.
            </summary>
            <param name="date">The date to find the previous date from.</param>
            <param name="validDays">A list of valid days to select from.</param>
            <returns></returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.EnumerableExtensions.ToPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Converts any IEnumerable collection into a paged collection page. This will enumerate the results,
            so execution is not deferred.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <typeparam name="T">The type of the items within the list, inferred by the compiler.</typeparam>
            <returns>The requested page of the list.</returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.EnumExtensions">
            <summary>
            Provides extension methods to enumeration values.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Gets the description of a particular enumeration value, using a
            <see cref="T:System.ComponentModel.DescriptionAttribute"/> and its value should one exist on the given
            enumeration value, else will fall back to the implementation of <see cref="M:System.Enum.ToString"/>.
            </summary>
            <param name="value">
            The value to get a description for.
            </param>
            <returns>
            The description of the given enumeration value.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.EnumUtilities">
            <summary>
            A small collection of utility methods when dealing with enums.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.EnumUtilities.GetAllItems``1">
            <summary>
            For a given enum type will get all values that have been defined.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>All defined values for the enumeration.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.EnumUtilities.GetDescriptions(System.Type)">
            <summary>
            For a given enum type will get the descriptions for all of the
            defined values.
            </summary>
            <param name="enumType">The type of the enumeration.</param>
            <returns>Descriptions for all defined values for the enumeration.</returns>
            <seealso cref="M:Blueprint.Core.Utilities.EnumExtensions.GetDescription(System.Enum)"/>
        </member>
        <member name="M:Blueprint.Core.Utilities.EnumUtilities.GetDescriptionsWithKeys(System.Type)">
            <summary>
            For a given enum type will get the descriptions for all of the
            defined values as a dictionary, with the keys being the ToString() representation
            of the enum.
            </summary>
            <param name="enumType">The type of the enumeration.</param>
            <returns>Descriptions for all defined values for the enumeration.</returns>
            <seealso cref="M:Blueprint.Core.Utilities.EnumExtensions.GetDescription(System.Enum)"/>
        </member>
        <member name="T:Blueprint.Core.Utilities.ExpressionUtilities">
            <summary>
            A number of utility methods when dealing with LINQ <see cref="T:System.Linq.Expressions.Expression"/>s.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.ExpressionUtilities.GetMethodCallExpressionArgumentValues(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Given a MethodCallExpression will convert all arguments into their actual runtime values.
            </summary>
            <param name="methodCallExpression">
            The method call expression from which to convert the arguments.
            </param>
            <returns>
            The actual values supplied in the given method call expression.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.ExpressionUtilities.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            Given an Expression will get the value that it represents, particularly useful for taking
            a MethodCallExpression and determine the actual values being passed.
            </summary>
            <param name="expression">
            The expression to convert to an actual value.
            </param>
            <returns>
            The value that the expression represents.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.FileSize">
            <summary>
            Represents the size of a file in bytes, providing the necessary formatting methods to allow
            converting to an appropriate string representation of a given unit size (e.g. as Bytes, Megabytes,
            Gigabytes etc.).
            </summary>
        </member>
        <member name="P:Blueprint.Core.Utilities.FileSize.Bytes">
            <summary>
            Gets the number of bytes this <see cref="T:Blueprint.Core.Utilities.FileSize" /> represents.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Utilities.FileSize.Kilobytes">
            <summary>
            Gets the number of kilobytes this <see cref="T:Blueprint.Core.Utilities.FileSize" /> represents.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Utilities.FileSize.Megabytes">
            <summary>
            Gets the number of megabytes this <see cref="T:Blueprint.Core.Utilities.FileSize" /> represents.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Utilities.FileSize.Gigabytes">
            <summary>
            Gets the number of gigabytes this <see cref="T:Blueprint.Core.Utilities.FileSize" /> represents.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Utilities.FileSize.Terabytes">
            <summary>
            Gets the number of terabytes this <see cref="T:Blueprint.Core.Utilities.FileSize" /> represents.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Utilities.FileSize.Petabytes">
            <summary>
            Gets the number of petabytes this <see cref="T:Blueprint.Core.Utilities.FileSize" /> represents.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.FromBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance that represents the given number
            of bytes.
            </summary>
            <param name="bytes">
            The number of bytes.
            </param>
            <returns>
            A new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.FromKilobytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance that represents the given number
            of kilobytes.
            </summary>
            <param name="kilobytes">
            The number of bytes.
            </param>
            <returns>
            A new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.FromMegabytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance that represents the given number
            of megabytes.
            </summary>
            <param name="megabytes">
            The number of bytes.
            </param>
            <returns>
            A new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.FromGigabytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance that represents the given number
            of gigabytes.
            </summary>
            <param name="gigabytes">
            The number of bytes.
            </param>
            <returns>
            A new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.FromPetabytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance that represents the given number
            of petabytes.
            </summary>
            <param name="petabytes">
            The number of bytes.
            </param>
            <returns>
            A new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.FromTerabytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance that represents the given number
            of terabytes.
            </summary>
            <param name="terabytes">
            The number of bytes.
            </param>
            <returns>
            A new <see cref="T:Blueprint.Core.Utilities.FileSize"/> instance.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.Equals(System.Object)">
            <summary>
            Determines if the specified object contains the same number of bytes as the current object.
            </summary>
            <param name="obj">
            The object to compare with the current instance.
            </param>
            <returns>
            True if the two values are the same.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.GetHashCode">
            <summary>
            Returns the HashCode.
            </summary>
            <returns>The hash code of this file size.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.ToString">
            <summary>
            Returns a string representation of this file size, using the 'File System'
            format that will return a representation in the largest unit size
            appropriate (e.g. 1023B -&gt; "1023B", 1024B -&gt; "1KB").
            </summary>
            <returns>
            A string representation of this file size.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of this file size, using the provided format modifier
            and provider.
            </summary>
            <remarks>
            The format modifier either specifies only a unit size (e.g. 'B', 'KB', 'MB', or the special 'FS') or
            a number formatter plus unit size, separated by a colon (e.g. 'N2:GB' for a gigabyte representation
            to 2 decimal places).
            </remarks>
            <param name="format">The format to use.</param>
            <param name="formatProvider">A format provider which may contain a custom formatter to use instead
            of the default provided by this method.</param>
            <returns>A string representation of this file size.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.op_Equality(Blueprint.Core.Utilities.FileSize,Blueprint.Core.Utilities.FileSize)">
            <summary>
            Compares the two objects to determine if they contain the same number of bytes.
            </summary>
            <param name="leftTerm">
            The object to compare to.
            </param>
            <param name="rightTerm">
            The object to compare with.
            </param>
            <returns>
            True if the two values are the same.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.FileSize.op_Inequality(Blueprint.Core.Utilities.FileSize,Blueprint.Core.Utilities.FileSize)">
            <summary>
            Compares the two objects to determine if they contain a different number of bytes.
            </summary>
            <param name="leftTerm">
            The object to compare to.
            </param>
            <param name="rightTerm">
            The object to compare with.
            </param>
            <returns>
            True if the two values are different.
            </returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.HttpExtensions.ParseLinks(System.String)">
            <summary>
            Given the 'Links' header will parse the links that have been returned from the API.
            </summary>
            <param name="linksHeader">The links header, which may be null or contain an empty string.</param>
            <returns>A dictionary of links, with the key being the <c>rel</c> and the value the URL.</returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.ObjectToDictionaryHelper">
            <summary>
            A set of utility methods that can be used to turn any object in to a Dictionary
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.ObjectToDictionaryHelper.ToDictionary(System.Object)">
            <summary>
            Converts the given object in to a dictionary, including all properties as-is with no conversion
            and including null properties.
            </summary>
            <param name="source">The object to convert</param>
            <returns>A dictionary representation of the given object</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.ObjectToDictionaryHelper.ToStringDictionary(System.Object)">
            <summary>
            Converts the given object in to a dictionary, including all properties (including null values) and calling
            ToString of them.
            </summary>
            <param name="source">The object to convert</param>
            <returns>A dictionary representation of the given object</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.ObjectToDictionaryHelper.ToDictionary``1(System.Object)">
            <summary>
            Converts the given object in to a dictionary, including only properties of the specified type, or one
            whose type is assignable (e.g. T == object would include all properties).
            </summary>
            <param name="source">The object to convert</param>
            <returns>A dictionary representation of the given object</returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.Page`1">
            <summary>
            A page of a list, with details about which page it is and details on the original collection.
            </summary>
            <typeparam name="T">The type of the elements in this page.</typeparam>
        </member>
        <member name="M:Blueprint.Core.Utilities.Page`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Utilities.Page`1"/> class.
            </summary>
            <param name="items">The items that represent the selected page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of each page.</param>
            <param name="totalCount">The total count.</param>
        </member>
        <member name="P:Blueprint.Core.Utilities.Page`1.Items">
            <summary>
            Gets all the items in the current page.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Utilities.Page`1.PageCount">
            <summary>
            Gets the number of pages in the collection.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Utilities.Page`1.PageNumber">
            <summary>
            Gets the current page number.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Utilities.Page`1.PageSize">
            <summary>
            Gets the size of the page.
            </summary>
            <value>
            The size of the page.
            </value>
        </member>
        <member name="P:Blueprint.Core.Utilities.Page`1.TotalCount">
            <summary>
            Gets the total number of objects in the collection.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.Page`1.CalculatePageCount(System.Int32,System.Int32)">
            <summary>
            Calculates the page count.
            </summary>
            <param name="pageSize">
            Size of the page.
            </param>
            <param name="totalCount">
            The total count.
            </param>
            <returns>
            The number of pages the collection is split into.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.RandomStringGenerator">
            <summary>
            A random string generator that can, given sets of characters to include in a generated string and
            a desired length, generate random strings.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.RandomStringGenerator.Generate">
            <summary>
            Generates a random string containing characters from any defined characters sets or
            the desired length.
            </summary>
            <returns>A random string.</returns>
            <exception cref="T:System.InvalidOperationException">If no character sets or length has been defined.</exception>
        </member>
        <member name="M:Blueprint.Core.Utilities.RandomStringGenerator.OfLength(System.Int32)">
            <summary>
            Sets the desired length of the random string when next calling <see cref="M:Blueprint.Core.Utilities.RandomStringGenerator.Generate"/>.
            </summary>
            <param name="desiredLength">The desired length of the string to be generated.</param>
            <returns>This RandomStringGenerator for further configuration.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.RandomStringGenerator.WithCharacter(System.Char)">
            <summary>
            Adds the specified character as a 'set', indicating that this single character could
            be included in the output.
            </summary>
            <param name="character">The character to be included in the output.</param>
            <returns>This RandomStringGenerator for further configuration.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.RandomStringGenerator.WithCharacterSet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Adds the specified character set, indicating that the output can contain any one of the
            characters on this set.
            </summary>
            <param name="characterSet">The character set to be included in the output.</param>
            <returns>This RandomStringGenerator for further configuration.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.RandomStringGenerator.WithCharacterSet(System.Char,System.Char)">
            <summary>
            Adds a character set that includes all characters from 'start' to 'end', inclusive, using
            the ASCII codes as the definition of a range (e.g 'a' to 'z' to include the lowercase alphabet).
            </summary>
            <param name="start">The character from which to start (inclusive).</param>
            <param name="end">The character to end (inclusive).</param>
            <returns>This RandomStringGenerator for further configuration.</returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.ReflectionExtensions">
            <summary>
            Provides a number of extension methods to relfection-based classes, consiting of small
            utility methods that can cut down on a small amount of boilerplate elsewhere in the codebase.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.ReflectionExtensions.CanBeNull(System.Type)">
            <summary>
            Indicates whether or not the specified type is a nullable type or not.
            </summary>
            <param name="type">The type which is to be checked.</param>
            <returns>Whether or not the specified type is a Nullable type.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.ReflectionExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets attributes of the specified type.
            </summary>
            <typeparam name="T">The type of attribute to look for.</typeparam>
            <param name="memberInfo">The member to search for attributes.</param>
            <param name="inherit"><c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>.
            This parameter is ignored for properties and events.</param>
            <returns>The list of attributes for this member that are of the given type.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.ReflectionExtensions.GetAttributesIncludingInterface``1(System.Type)">
            <summary>
            Gets all attributes, including those of parent classes and interfaces that are of
            the specified type.
            </summary>
            <typeparam name="T">The type of attribute to look for.</typeparam>
            <param name="type">The type to search for attributes.</param>
            <returns>The list of attributes for this member that are of the given type.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.ReflectionExtensions.GetNonNullableType(System.Type)">
            <summary>
            Given a type will get its non-nullable version of it represents a nullable type (e.g. Nullable&lt;int&gt;),
            or the type if it is already a non-nullable type.
            </summary>
            <param name="type">The type to get a non-nullable version from.</param>
            <returns>The non-nullable version of the given type.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.ReflectionExtensions.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Indicates whether the given member has any attributes of the specified type.
            </summary>
            <typeparam name="T">The type of attribute to look for.</typeparam>
            <param name="memberInfo">The member to search for attributes.</param>
            <param name="inherit"><c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>.
            This parameter is ignored for properties and events.</param>
            <returns>Whether this member has any attributes of the specified type.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.ReflectionExtensions.HasAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Indicates whether the given member has any attributes of the specified type.
            </summary>
            <param name="memberInfo">The member to search for attributes.</param>
            <param name="attributeType">The type of attribute to look for.</param>
            <param name="inherit"><c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>.
            This parameter is ignored for properties and events.</param>
            <returns>Whether this member has any attributes of the specified type.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.ReflectionExtensions.IsEnumerable(System.Type)">
            <summary>
            Indicates whether or not the specified type is an IEnumerable type, such as a List
            or Set, excluding the string type which would typically not be treated as an actual
            enumerable type.
            </summary>
            <param name="type">The type which is to be checked.</param>
            <returns>Whether or not the specified type is an IEnumerable type.</returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.ReflectionUtilities">
            <summary>
            A number of utility methods when dealing with the reflection API.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.ReflectionUtilities.CallGenericMethod``1(``0,System.String,System.Type[],System.Object[])">
            <summary>
            Provides a means to call a generic method where the type parameters are not known at compile time, such that
            if the method was called normally the generic type parameter inferred would be too 'loose'.
            </summary>
            <remarks>
            This method will also ensure that should an exception be thrown it will maintain its original stack trace, the
            use of this method becomes transparent to the client with the exception of having some entries in the stack trace
            representing the methods in this class. This avoids the pitfall of using reflection that means exceptions are wrapped
            in a TargetInvocationException and thus losing some details of the original exception.
            </remarks>
            <typeparam name="T">The type of the object on which to call the method, inferred.</typeparam>
            <param name="instance">The instance on which to call the method.</param>
            <param name="methodName">The name of the method to execute (use <c>nameof</c>).</param>
            <param name="genericTypeParameters">The type parameters that should be specified when constructing the method.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <returns>The result of the given method call.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.ReflectionUtilities.CallGenericMethodWithExplicitTypes``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Type[])">
            <summary>
            Provides a means to call a generic method where the type parameters are not known at compile time, such that
            if the method was called normally the generic type parameter inferred would be too 'loose'.
            </summary>
            <remarks>
            This method will also ensure that should an exception be thrown it will maintain its original stack trace, the
            use of this method becomes transparent to the client with the exception of having some entries in the stack trace
            representing the methods in this class. This avoids the pitfall of using reflection that means exceptions are wrapped
            in a TargetInvocationException and thus losing some details of the original exception.
            </remarks>
            <typeparam name="T">The type of the object on which to call the method, inferred.</typeparam>
            <typeparam name="TResult">The resulting type of the method being called, inferred.</typeparam>
            <param name="instance">The instance on which to call the method.</param>
            <param name="expression">An expression that represents the call that is to be made, including the real parameters.</param>
            <param name="genericTypeParameters">The type parameters that should be specified when constructing the method.</param>
            <returns>The result of the given method call.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.ReflectionUtilities.CallGenericMethodWithExplicitTypes``1(``0,System.Linq.Expressions.Expression{System.Action{``0}},System.Type[])">
            <summary>
            Provides a means to call a generic method where the type parameters are not known at compile time, such that
            if the method was called normally the generic type parameter inferred would be too 'loose'.
            </summary>
            <remarks>
            This method will also ensure that should an exception be thrown it will maintain its original stack trace, the
            use of this method becomes transparent to the client with the exception of having some entries in the stack trace
            representing the methods in this class. This avoids the pitfall of using reflection that means exceptions are wrapped
            in a TargetInvocationException and thus losing some details of the original exception.
            </remarks>
            <typeparam name="T">The type of the object on which to call the method, inferred.</typeparam>
            <param name="instance">The instance on which to call the method.</param>
            <param name="expression">An expression that represents the call that is to be made, including the real parameters.</param>
            <param name="genericTypeParameters">The type parameters that should be specified when constructing the method.</param>
        </member>
        <member name="M:Blueprint.Core.Utilities.ReflectionUtilities.MakeGenericMethod(System.Linq.Expressions.MethodCallExpression,System.Type[])">
            <summary>
            Given a MethodCallExpression will make a method that represents a call to the method being referred to but
            with the specified generic type parameters.
            </summary>
            <param name="methodCallExpression">The method call expression that represents a generic method call.</param>
            <param name="genericTypeParameters">The type parameters that should be used.</param>
            <returns>A concrete version of the generic method given using the specified type parameters.</returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.StopwatchLogger">
            <summary>
            Provides a simple means of tracking the time it takes to perform
            actions through logging of a start and end message, which will
            contain a duration in milliseconds of how long something took.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.StopwatchLogger.LogTimeWrapper(NLog.Logger,System.String,System.Object[])">
            <summary>
            Starts a new timer, logging the message immediately and then, once disposed, the
            message again with `time_taken_ms={[0-9]?}` appended.
            </summary>
            <param name="log">The log to which to output this information.</param>
            <param name="message">The message to be logged before and after the action.</param>
            <param name="args">The arguments to be used in formatting of the message.</param>
            <returns>A disposable object that, once disposed, will log the time between creating and
            disposing.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.StopwatchLogger.LogTime(NLog.Logger,System.String,System.Object[])">
            <summary>
            Starts a new timer, only logging message once disposed, with the
            with `time_taken_ms={[0-9]?}` appended.
            </summary>
            <param name="log">The log to which to output this information.</param>
            <param name="message">The message to be logged before and after the action.</param>
            <param name="args">The arguments to be used in formatting of the message.</param>
            <returns>A disposable object that, once disposed, will log the time between creating and
            disposing.</returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.StreamExtensions">
            <summary>
            Provides a number of extension methods to the built-in <see cref="T:System.IO.Stream"/> class.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.StreamExtensions.ReadFully(System.IO.Stream)">
            <summary>
            Given an input stream will read fully to the end, starting at the current
            pointer position of the stream, returning a byte array containing the
            remaining contents of the given stream.
            </summary>
            <param name="input">
            The stream to read from.
            </param>
            <returns>
            A byte array containing the remaining contents of the given stream.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.StringExtensions">
            <summary>
            Provides a number of extension methods to the built-in <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.StringExtensions.Fmt(System.String,System.Object[])">
            <summary>
            A small shim over <see cref="M:System.String.Format(System.String,System.Object[])"/> that uses
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> and provides a slightly nicer
            syntax by taking advantage of the extension method syntax.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments to inject into the format string.</param>
            <returns>A formatted string.</returns>
        </member>
        <member name="T:Blueprint.Core.Utilities.TimePeriod">
            <summary>
            A time period, defined simply as a start and end date.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.TimePeriod.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the TimePeriod class.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
        </member>
        <member name="P:Blueprint.Core.Utilities.TimePeriod.EndDate">
            <summary>
            Gets the end date of this time period.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Utilities.TimePeriod.StartDate">
            <summary>
            Gets the start date of this time period.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Utilities.TimePeriod.GetOverlappingTimePeriods(System.Collections.Generic.IEnumerable{Blueprint.Core.Utilities.TimePeriod})">
            <summary>
            Returns all of the TimePeriods that are overlapped by this instance.
            </summary>
            <param name="timePeriods">The time periods to check for overlapping instances.</param>
            <returns>A collection of time periods that overlap the current instance.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.TimePeriod.Overlaps(Blueprint.Core.Utilities.TimePeriod)">
            <summary>
            Checks that the given time period isn't overlapped by the current instance.
            </summary>
            <param name="timePeriod">The time period that is to be checked to determine whether or not it overlaps this one.</param>
            <returns>True if the given time period is overlapped.</returns>
        </member>
        <member name="M:Blueprint.Core.Utilities.TypeExtensions.SimpleAssemblyQualifedName(System.Type)">
            <summary>
            Gets a 'simple' qualified assembly name, one that contains the full type name including 
            namespace, and the assembly name, without culture, version and token.
            </summary>
            <remarks>
            This method is useful for teh case where the version information could change between
            serializing and deserializing when the type information is passed around, for example
            when pushing tasks / messages around.
            </remarks>
            <param name="type">The type to get the name from.</param>
            <returns>A 'simple' qualified name</returns>
        </member>
        <member name="T:Blueprint.Core.Validation.GreaterThanAttribute">
            <summary>
            Requires the property this attribute is assigned to, to be a number greater than the specified minimum value.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.GreaterThanAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.GreaterThanAttribute"/> class. 
            </summary>
            <param name="minimumValue">
            The minimum value allowed.
            </param>
        </member>
        <member name="M:Blueprint.Core.Validation.GreaterThanAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.GreaterThanAttribute"/> class. 
            </summary>
            <param name="minimumValue">
            The minimum value allowed.
            </param>
            <param name="errorMessage">
            The error message.
            </param>
        </member>
        <member name="M:Blueprint.Core.Validation.GreaterThanAttribute.#ctor(System.Int32,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.GreaterThanAttribute"/> class. 
            </summary>
            <param name="minimumValue">
            The minimum value allowed.
            </param>
            <param name="errorMessageAccessor">
            The function that enables access to validation resources.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessageAccessor"/> is null.
            </exception>
        </member>
        <member name="P:Blueprint.Core.Validation.GreaterThanAttribute.MinimumValue">
            <summary>
            Gets the minimum value for the property.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.GreaterThanAttribute.IsValid(System.Object)">
            <summary>
            If the value is greater than that provided by the constructor, this returns true. Null objects also evaluate to true.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            True if the value is greater than the minimum value, else false.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Validation.GreaterThanOrEqualToAttribute">
            <summary>
            Requires the property this attribute is assigned to, to be a number greater than or equal to the specified minimum value.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.GreaterThanOrEqualToAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.GreaterThanOrEqualToAttribute"/> class. 
            </summary>
            <param name="minimumValue">
            The minimum value allowed.
            </param>
        </member>
        <member name="M:Blueprint.Core.Validation.GreaterThanOrEqualToAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.GreaterThanOrEqualToAttribute"/> class. 
            </summary>
            <param name="minimumValue">
            The minimum value allowed.
            </param>
            <param name="errorMessage">
            The error message.
            </param>
        </member>
        <member name="M:Blueprint.Core.Validation.GreaterThanOrEqualToAttribute.#ctor(System.Int32,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.GreaterThanOrEqualToAttribute"/> class. 
            </summary>
            <param name="minimumValue">
            The minimum value allowed.
            </param>
            <param name="errorMessageAccessor">
            The function that enables access to validation resources.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessageAccessor"/> is null.
            </exception>
        </member>
        <member name="P:Blueprint.Core.Validation.GreaterThanOrEqualToAttribute.MinimumValue">
            <summary>
            Gets the minimum value for the property.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.GreaterThanOrEqualToAttribute.IsValid(System.Object)">
            <summary>
            If the value is greater than that provided by the constructor, this returns true. Null objects also evaluate to true.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            True if the value is greater than the minimum value, else false.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Validation.GreaterThanPropertyAttribute">
            <summary>
            Makes the property required if the 'dependant property' has a value that exists in the 'dependant value'.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.GreaterThanPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.GreaterThanPropertyAttribute"/> class.
            </summary>
            <param name="dependantProperty">The dependant property.</param>
        </member>
        <member name="P:Blueprint.Core.Validation.GreaterThanPropertyAttribute.DependantProperty">
            <summary>
            Gets the property to check for one of the dependant values.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.GreaterThanPropertyAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value. 
            If the dependant property contains one of the values inside dependant values then value 
            must not be null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Validation.InFutureAttribute">
            <summary>
            A validation expression that indicates the value must represent a value in the
            future.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.InFutureAttribute.#ctor(Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.InFutureAttribute"/> class.
            </summary>
            <param name="temporalCheckType">The type of check to perform.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.InFutureAttribute.#ctor(System.String,Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.InFutureAttribute"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="temporalCheckType">The type of check to perform.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.InFutureAttribute.#ctor(System.Func{System.String},Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.InFutureAttribute"/> class.
            </summary>
            <param name="errorMessageAccessor">The function that enables access to validation resources.</param>
            <param name="temporalCheckType">The type of check to perform.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessageAccessor"/> is null.
            </exception>
        </member>
        <member name="M:Blueprint.Core.Validation.InFutureAttribute.IsValid(System.Object)">
            <summary>
            Evaluates if the provided object is in the future or not.
            </summary>
            <param name="value">The date to evaluate.</param>
            <returns>
            True if the date is in the future.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Validation.InPastAttribute">
            <summary>
            A validation expression that indicates the value must represent a value in the
            past.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.InPastAttribute.#ctor(Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.InPastAttribute"/> class.
            </summary>
            <param name="temporalCheckType">The type of check to perform.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.InPastAttribute.#ctor(System.String,Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.InPastAttribute"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="temporalCheckType">The type of check to perform.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.InPastAttribute.#ctor(System.Func{System.String},Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.InPastAttribute"/> class.
            </summary>
            <param name="errorMessageAccessor">The function that enables access to validation resources.</param>
            <param name="temporalCheckType">The type of check to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="errorMessageAccessor"/> is null.</exception>
        </member>
        <member name="M:Blueprint.Core.Validation.InPastAttribute.IsValid(System.Object)">
            <summary>
            Evaluates if the provided object is in the past or not.
            </summary>
            <param name="value">
            The date to evaluate.
            </param>
            <returns>
            True if the date is in the future.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Validation.LessThanAttribute">
            <summary>
            Requires the property this attribute is assigned to, to be a number less than the specified maximum value.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.LessThanAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.LessThanAttribute"/> class.
            </summary>
            <param name="maximumValue">The minimum value allowed.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.LessThanAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.LessThanAttribute"/> class.
            </summary>
            <param name="maximumValue">The maximum value allowed.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.LessThanAttribute.#ctor(System.Int32,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.LessThanAttribute"/> class.
            </summary>
            <param name="maximumValue">The maximum value allowed.</param>
            <param name="errorMessageAccessor">The function that enables access to validation resources.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessageAccessor"/> is null.
            </exception>
        </member>
        <member name="P:Blueprint.Core.Validation.LessThanAttribute.MaximumValue">
            <summary>
            Gets the maximum value for the property.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.LessThanAttribute.IsValid(System.Object)">
            <summary>
            If the value is less than that provided by the constructor, this returns true. Null objects also evaluate to true.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            True if the value is less than the minimum value, else false.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Validation.LessThanOrEqualToAttribute">
            <summary>
            Requires the property this attribute is assigned to, to be a number less than or equal to the specified maximum value.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.LessThanOrEqualToAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.LessThanOrEqualToAttribute"/> class.
            </summary>
            <param name="maximumValue">The minimum value allowed.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.LessThanOrEqualToAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.LessThanOrEqualToAttribute"/> class.
            </summary>
            <param name="maximumValue">The maximum value allowed.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.LessThanOrEqualToAttribute.#ctor(System.Int32,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.LessThanOrEqualToAttribute"/> class.
            </summary>
            <param name="maximumValue">The maximum value allowed.</param>
            <param name="errorMessageAccessor">The function that enables access to validation resources.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessageAccessor"/> is null.
            </exception>
        </member>
        <member name="P:Blueprint.Core.Validation.LessThanOrEqualToAttribute.MaximumValue">
            <summary>
            Gets the maximum value for the property.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.LessThanOrEqualToAttribute.IsValid(System.Object)">
            <summary>
            If the value is less than that provided by the constructor, this returns true. Null objects also evaluate to true.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            True if the value is less than the minimum value, else false.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Validation.MaxItemsListAttribute">
            <summary>
            Requies that the collection this attribute is assigned to has fewer than the maximum number of items specified.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.MaxItemsListAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.MaxItemsListAttribute"/> class.
            </summary>
            <param name="maxItems">The maximum number of items.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.MaxItemsListAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.MaxItemsListAttribute"/> class.
            </summary>
            <param name="maxItems">The maximum number of items.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.MaxItemsListAttribute.#ctor(System.Int32,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.MaxItemsListAttribute"/> class.
            </summary>
            <param name="maxItems">The maximum number of items.</param>
            <param name="errorMessageAccessor">The function that enables access to validation resources.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="errorMessageAccessor"/> is null.</exception>
        </member>
        <member name="P:Blueprint.Core.Validation.MaxItemsListAttribute.MaxItems">
            <summary>
            Gets the maximum number of items allowed in the collection.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.MaxItemsListAttribute.IsValid(System.Object)">
            <summary>
            The property is valid if it is a collection with fewer than the specified number of items.
            </summary>
            <param name="value">An IEnumerable instance.</param>
            <returns><c>true</c> if the passed object contains fewer than the speficied number of items.</returns>
        </member>
        <member name="T:Blueprint.Core.Validation.MustBeTrueAttribute">
            <summary>
            The property this attribute is attached to must be <c>true</c>.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.MustBeTrueAttribute.IsValid(System.Object)">
            <summary>
            Validates that the provided value is true.
            </summary>
            <param name="value">The boolean to evaluate.</param>
            <returns>
            <c>true</c> if the value is <c>null</c> or a value representing <c>true</c>, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Validation.NotEmptyListAttribute">
            <summary>
            Requires the property this attribute is applied to, to have at least one item in its collection.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.NotEmptyListAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.NotEmptyListAttribute"/> class.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.NotEmptyListAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.NotEmptyListAttribute"/> class.
            </summary>
            <param name="errorMessage">
            The error message.
            </param>
        </member>
        <member name="M:Blueprint.Core.Validation.NotEmptyListAttribute.#ctor(System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.NotEmptyListAttribute"/> class.
            </summary>
            <param name="errorMessageAccessor">
            The function that enables access to validation resources.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessageAccessor"/> is null.
            </exception>
        </member>
        <member name="M:Blueprint.Core.Validation.NotEmptyListAttribute.IsValid(System.Object)">
            <summary>
            Evaluates if the provided collection is a filled list. A null object also returns as valid.
            </summary>
            <param name="value">
            The value to be checked.
            </param>
            <returns>
            Whether or not the value is an enumerable value that has at least one item.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Validation.NotInFutureAttribute">
            <summary>
            A validation expression that indicates the value must represent a value that is not in the
            future.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.NotInFutureAttribute.#ctor(Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.NotInFutureAttribute"/> class.
            </summary>
            <param name="temporalCheckType">The type of check to perform.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.NotInFutureAttribute.#ctor(System.String,Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.NotInFutureAttribute"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="temporalCheckType">The type of check to perform.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.NotInFutureAttribute.#ctor(System.Func{System.String},Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.NotInFutureAttribute"/> class.
            </summary>
            <param name="errorMessageAccessor">The function that enables access to validation resources.</param>
            <param name="temporalCheckType">The type of check to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="errorMessageAccessor"/> is null.</exception>
        </member>
        <member name="M:Blueprint.Core.Validation.NotInFutureAttribute.IsValid(System.Object)">
            <summary>
            Evaluates if the provided object is in the future or not.
            </summary>
            <param name="value">The date to evaluate.</param>
            <returns><c>true</c> if the date is in the future.</returns>
        </member>
        <member name="T:Blueprint.Core.Validation.NotInPastAttribute">
            <summary>
            A validation expression that indicates the value must represent a value that is not in the
            past.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.NotInPastAttribute.#ctor(Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.NotInPastAttribute"/> class.
            </summary>
            <param name="temporalCheckType">The type of check to perform.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.NotInPastAttribute.#ctor(System.String,Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.NotInPastAttribute"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="temporalCheckType">The type of check to perform.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.NotInPastAttribute.#ctor(System.Func{System.String},Blueprint.Core.TemporalCheck)">
            <summary>
            Initializes a new instance of the <see cref="T:Blueprint.Core.Validation.NotInPastAttribute"/> class.
            </summary>
            <param name="errorMessageAccessor">The function that enables access to validation resources.</param>
            <param name="temporalCheckType">The type of check to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="errorMessageAccessor"/> is null.</exception>
        </member>
        <member name="M:Blueprint.Core.Validation.NotInPastAttribute.IsValid(System.Object)">
            <summary>
            Evaluates if the provided object is in the past or not.
            </summary>
            <param name="value">The date to evaluate.</param>
            <returns><c>true</c> if the date is in the past.</returns>
        </member>
        <member name="T:Blueprint.Core.Validation.RequiredIfNotAttribute">
            <summary>
            Makes the property required if the 'dependant property' has a value that doesn't exists in the 'dependant value'.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.RequiredIfNotAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="!:RequiredIfAttribute"/> class.
            </summary>
            <param name="dependantProperty">The dependant property.</param>
            <param name="dependantValue">The dependant value(s).</param>
        </member>
        <member name="P:Blueprint.Core.Validation.RequiredIfNotAttribute.DependantValue">
            <summary>
            Gets the dependant value.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Validation.RequiredIfNotAttribute.DependantProperty">
            <summary>
            Gets the property to check for one of the dependant values.
            </summary>
        </member>
        <member name="P:Blueprint.Core.Validation.RequiredIfNotAttribute.DependantValues">
            <summary>
            Gets the collection of values that will trigger this property to be required.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.RequiredIfNotAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value. 
            If the dependant property contains one of the values inside dependant values then value 
            must not be null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class.
            </returns>
        </member>
        <member name="T:Blueprint.Core.Validation.ValidationException">
            <summary>
            An exception that will be thrown in the case of validation failures.
            </summary>
        </member>
        <member name="M:Blueprint.Core.Validation.ValidationException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ValidationException class for a single
            property being invalid as a utility to avoid a lot of boilerplate.
            </summary>
            <param name="property">The property that failure applies to.</param>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.ValidationException.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the ValidationException class.
            </summary>
            <param name="overallFailureMessage">The message of the exception.</param>
            <param name="validationResults">The validation failures.</param>
        </member>
        <member name="M:Blueprint.Core.Validation.ValidationException.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Initializes a new instance of the ValidationException class.
            </summary>
            <param name="overallFailureMessage">The message of the exception.</param>
            <param name="validationResults">The validation failures.</param>
        </member>
        <member name="P:Blueprint.Core.Validation.ValidationException.ValidationResults">
            <summary>
            Gets the validation failures that have caused this validation exception.
            </summary>
        </member>
    </members>
</doc>
